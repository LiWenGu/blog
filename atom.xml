<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello</title>
  <subtitle>严律己，宽待人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-12T09:57:12.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>TheOthers</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>七、JVM体系结构与工作方式</title>
    <link href="http://yoursite.com/2017/08/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9AJVM%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/08/12/读书笔记/深入分析Java_Web技术/第七章：JVM体系结构与工作方式/</id>
    <published>2017-08-12T09:57:12.000Z</published>
    <updated>2017-08-12T09:57:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-JVM体系结构"><a href="#1-JVM体系结构" class="headerlink" title="1. JVM体系结构"></a>1. JVM体系结构</h1><p>前言：<br>JVM能够跨计算机体系结构来执行Java字节码，主要是由于JVM屏蔽了与各个计算机平台相关的软件或者硬件之间的差异，
使得与平台相关的耦合统一由JVM提供者来实现。</p>
<h2 id="1-何谓JVM"><a href="#1-何谓JVM" class="headerlink" title="1. 何谓JVM"></a>1. 何谓JVM</h2><p>JVM的全称是Java Virtual Machine(Java虚拟机)，它通过模拟一个计算机来达到一个计算机所具体的计算功能。
我们先来看看一个真实的计算机如何才能具备计算的功能。</p>
<ul>
<li>指令集，这个计算机能够识别的计算语言的命令集合.</li>
<li>计算单位，即能够识别并且控制指令执行的功能模块。</li>
<li>寻址方式，地址的位数、最小地址和最大地址范围，以及地址的运行规则。</li>
<li>寄存器定义，包括操作数寄存器、变址寄存器、控制寄存器等的定义、数量和使用方式。</li>
<li>存储单元，能够存储操作数和保存操作结构的单元，如内核级缓存、内存和磁盘等。</li>
</ul>
<p>在上面的几个部分中，与代码执行最密切的还是指令集部分。<br>什么是指令集？有何作用？所谓指令集就是在CPU中用来计算和控制计算机系统的一套指令的集合，每一种新型的CPU在设计时都规定了
一系列与其他硬件电路相配合的指令系统。而指令集的先进与否也关系到CPU的性能发挥，它是体现CPU性能的一个重要标志。<br>在当前计算机中有哪些指令集？从主流的体系结构上分为精简指令集(Reduced Instruction Set Computing, RISC)和复杂指令集
(Complex Instrction Set Computing, CISC)。<br>当前使用的桌面操作系统中基本上使用的都是CISC，如x86架构的的CPU都使用CISC。除了这两种指令集之外Intel和AMD公司还在它们
的基础上开发出了很多扩展指令集，包括多媒体扩展指令，以及3D处理性能开发的指令集等。<br>指令集与汇编语言有什么关系？指令集是可以直接被机器识别的机器码，也就是它必须以二进制格式存在于计算机中。而汇编语言是能够
被人识别的指令，汇编语言在顺序和逻辑上是与机器指令一一对应的。换句话说，汇编语言是为了让人能够更容易地记住机器指令而使用
的助记符。每一条汇编指令都可以直接翻译成一个机器指令，如MOVAX,1234H这条汇编语言对应的机器指令码为B83412。当然也不是所有
的汇编语言都有对应的机器指令，如nop指令。<br>指令集与CPU架构有何联系？如Intel与AMD的CPU的指令集是否兼容？也就是CPU的结构是否会影响指令集？答案都是肯定的。学过汇编语言
的人都知道在汇编语言中都是对寄存器和段的直接操作的命令，这些寄存器和段等芯片都是架构的一部分，所以不同的芯片架构设计一定会
对应到不同的机器指令集合。但是现在不同的芯片厂商往往都会采用兼容的方式来兼容其它不同架构的指令集。如AMD会兼容32为Intel的
x86系统架构的CPU，而当AMD开发出了支持64位指令的x86-64架构时，Intel又迫于压力不得不兼容这种架构而起了另外一个名字EM64T。<br>这种压力来自什么地方？当然是垄断了操作系统的微软，由于现在操作系统是管理计算机的真正入口，几乎所有的程序都要通过操作系统来调用，
所以如果操作系统不支持某种芯片的指令集，用户的程序是不可能执行的。这种情况也存在于我们国家自己设计的龙芯CPU，龙芯CPU不得不使用基于
MIPS架构的指令集(RISC)，因为目前有直接支持MIPS架构的操作系统(Linux)。如果没有操作系统和应用软件，再好的CPU也没有使用价值。
当然在一些很少用到的大型机方面不存在这个问题。<br>回到JVM的主题中来，JVM和实体机到底有何不同呢？大体有如下几点。</p>
<ul>
<li>一个抽象规范，这个规范就约束了JVM到底是什么，它有那些组成部分。</li>
<li>一个具体的实现，所谓具体的实现就是不同的厂商按照这个抽象的规范，用软件或者软件和硬件结合的方式在相同或者不同的平台上的具体实现。</li>
<li>一个运行中的实例，当用其运行一个Java程序时，它就是一个运行中的实例，每个运行中Java程序都是一个JVM实例。</li>
</ul>
<p>JVM和实体机一样也必须有一套合适的指令集，这个指令集能够被JVM解析执行。这个指令集我们称为JVM字节码指令集，
符合class文件规范的字节码都可以被JVM执行。</p>
<h2 id="2-JVM体系结构详解"><a href="#2-JVM体系结构详解" class="headerlink" title="2. JVM体系结构详解"></a>2. JVM体系结构详解</h2><p>除了指令集，JVM还需要哪些组成部分：</p>
<ul>
<li>类加载器，在JVM启动时或者在类运行时将需要的class加载到JVM中。</li>
<li>执行引擎，执行引擎的任务是负责执行class文件中包含的字节码指令，相当于实际机器上的CPU。</li>
<li>内存区，将内存划分成若干个区以模拟实际机器上的存储、记录和调度功能模块，如实际机器上的各种功能的寄存器或者PC指针的记录器等。</li>
<li>本地方法调用，调用C或C++实现的本地方法的代码返回结果。<br><img src="1-1.png" alt="JVM体系结构"></li>
</ul>
<h3 id="1-类加载器"><a href="#1-类加载器" class="headerlink" title="1. 类加载器"></a>1. 类加载器</h3><p>在深入分析ClassLoader时我们详细分析了ClassLoader的工作机制，这里需要说明的是，每个被JVM装载的类型都有一个对应的java.lang.Class类的实例
来表示该类型，该实例可以唯一标识被JVM装载的class类，要求这个实例和其他类的实例一样都存放在Java的堆中。</p>
<h3 id="2-执行引擎"><a href="#2-执行引擎" class="headerlink" title="2. 执行引擎"></a>2. 执行引擎</h3><p>执行引擎是JVM的核心部分，执行引擎的作用就是解析JVM字节码指令，得到执行结果。在《Java虚拟机规范》中详细地定义了执行引擎遇到每条
字节码指令时应该处理什么，并且应该得到什么结果。但是并没有规定执行引擎应该如何或取什么方式处理而得到这个结果。
因为执行引擎具体采取什么方式由JVM的实现厂家自己去实现，是直接解释执行还是采用JIT技术或转成本地代码去执行，还是采用寄存器这个芯片
模式去执行都可以。所以执行引擎的具体实现有很大的发挥空间，如SUN的hotspt是基于栈的执行引擎，而Google的Dalvik是基于寄存器的执行引擎。<br>执行引擎也就是执行一条条代码的一个流程，而代码都是包含在方法体内的，所以执行引擎本质上就是执行一个个方法所串起来的流程，
对应到操作系统中一个执行流程是一个Java进程还是一个Java线程呢？很显然是后者，因为一个Java进程可以有多个同时执行的执行流程。
这样说来每个Java县城就是一个执行引擎的实例，那么在一个JVM实例中就会同时有多个执行引擎在工作，这些执行引擎有的在执行用户的程序，
有的在执行JVM内存的程序（如Java垃圾收集器）。</p>
<h3 id="3-Java内存管理"><a href="#3-Java内存管理" class="headerlink" title="3. Java内存管理"></a>3. Java内存管理</h3><p>执行引擎在执行一段程序时需要存储一些东西，如操作码需要的操作数，操作码的执行结果需要保存。class类的字节码还有类的对象等信息都需要在执行
引擎执行之前就准备好。一个JVM实例会有一个方法区、Java堆、Java栈、PC寄存器和本地方法区。其中方法区和Java堆时所有线程共享的，
也就是可以被所有的执行引擎实例访问。每个新的执行引擎实例被创建时会为这个执行引擎创建一个Java栈和一个PC寄存器，
如果当前正在执行一个Java方法，那么在当前的这个Java栈中保存的是该线程中方法调用的状态，包括方法的参数、方法的局部变量、方法的返回值
以及运算的中间结果等。而PC寄存器会指向即将执行的下一条指令。<br>如果是本地方法调用，则存储在本地方法调用栈中或者特定实现中的某个内存区域中。</p>
<h1 id="2-JVM工作机制"><a href="#2-JVM工作机制" class="headerlink" title="2. JVM工作机制"></a>2. JVM工作机制</h1><h2 id="1-机器如何执行代码"><a href="#1-机器如何执行代码" class="headerlink" title="1. 机器如何执行代码"></a>1. 机器如何执行代码</h2><p>在分析JVM的执行引擎如何工作之前，我们不妨先看看在普通的实体机上程序是如何执行的。前面已经分析了计算机只接受机器执行，其他高级语言首先必须
经过编译器编译成机器指令才能被计算机正确执行，所以从高级语言到机器语言之间必须要有个翻译的过程，我们知道机器语言一般都是和硬件平台密切相关
的，而高级语言一般都是屏蔽所有底层的硬件平台甚至包括软件平台（如操作系统）的。高级语言之所以能屏蔽这些底层硬件架构的差异就是因为有中间的
一个转换环节，这个转换环节就是便宜，与硬件耦合的麻烦就交给了编译器，所以不同的硬件平台通常需要的编译器也是不同的。在当前这种环境下我们所
说的不同的硬件平台已经被更上一层的软件平台所代替了，这个软件平台就是操作系统，与其说不同的硬件平台的差异还不如说操作系统之间的差异，因为
现在的操作系统几乎完全向用户屏蔽了硬件，所以我们说编译器和操作系统的关系非常密切会更加容易让人理解。如C语言在Windows下的编译器为Microsoft C,
而在linux下通常是gcc，当然还有很多不同厂家的编译器，这些编译器都和操作系统关系不大，只是在实现上有些差异。<br>通常一个程序从编写到执行会经历以下一些阶段：</p>
<ul>
<li>源代码(source code) -&gt; 预处理器(preprocessor) -&gt; 编译器(compiler) -&gt; 汇编程序(assembler) -&gt; 目标代码(object code) -&gt; 链接器
(Linker) -&gt; 可执行程序(executables)  </li>
</ul>
<p>除了源代码和最后的可执行程序，中间的所有环节都是由现代意义上的编译器统一完成的，如在Linux平台下我们通常安装一个软件需要经过
configure、make、make install、make clean这4个步骤来完成。</p>
<ul>
<li>configure：为这个程序在当前的操作系统环境下选择合适的编译器来编译这个程序代码，也就是为这个程序代码选择合适的编译器和一些环境参数。</li>
<li>make：自然就是对程序代码进行编译操作了，它会将源码编译成可执行的目标文件。</li>
<li>make install：将已经编译好的可执行文件安装到操作系统指定或者默认的安装目录下。</li>
<li>make clean：用于删除编译时临时产生的目录或文件。</li>
</ul>
<p>值得注意的是，我们通常所说的编译器都是将某种高级语言直接编译成可执行的目标机器语言（实际上在某种操作系统中是需要动态链接的目标二进制文件：
在Windows下是dynamic link library，DDL；在Linux下是Shared Library，SO库）。但是实际上还有一些编译器是将一种高级语言编译成
另一种高级语言，或者将低级语言编译成高级语言（反编译），或者将高级语言编译成虚拟机目标语言，如Java编译器等。<br>再回到如何让机器（不管是实体机还是虚拟机）执行代码的主题，不管是何种指令集都只有集中最基本的元素：加、减、乘、求余、求模等。
这些运算又可以进一步分解成二进制位运算：与、或、异或等。这些运算又通过指令来完成，而指令的核心目标就是确定需要运算的种类（操作码）
和运算需要的数据（操作数），以及从哪里（寄存器或栈）获取操作数、将运算结果存放到什么地方（寄存器或是栈）等。这种不同的操作
方式又将指令划分为：一地址指令、二地址指令、三地址指令和零地址指令等n地址指令。相应的指令集会有对应的架构实现，如基于寄存器
的架构实现或基于栈的架构实现，这里的基于寄存器或者栈都是指在一个指令中的操作数是如何存取的。</p>
<h2 id="2-JVM为何选择基于栈的架构"><a href="#2-JVM为何选择基于栈的架构" class="headerlink" title="2. JVM为何选择基于栈的架构"></a>2. JVM为何选择基于栈的架构</h2><p>JVM执行字节码指令是基于栈的架构，也就是所有的操作数必须先入栈，然后根据指令中的操作码选择从栈顶弹出若干个元素进行计算后再将结果压入栈中。
在JVM中操作数可以存放在每一个</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-JVM体系结构&quot;&gt;&lt;a href=&quot;#1-JVM体系结构&quot; class=&quot;headerlink&quot; title=&quot;1. JVM体系结构&quot;&gt;&lt;/a&gt;1. JVM体系结构&lt;/h1&gt;&lt;p&gt;前言：&lt;br&gt;JVM能够跨计算机体系结构来执行Java字节码，主要是由于JVM屏
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="深入分析Java_Web技术" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java-Web%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>六、深入分析ClassLoader工作机制</title>
    <link href="http://yoursite.com/2017/08/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90ClassLoader%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2017/08/10/读书笔记/深入分析Java_Web技术/第六章：深入分析ClassLoader工作机制/</id>
    <published>2017-08-10T15:19:20.000Z</published>
    <updated>2017-08-11T17:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-ClassLoader的等级加载机制"><a href="#1-ClassLoader的等级加载机制" class="headerlink" title="1. ClassLoader的等级加载机制"></a>1. ClassLoader的等级加载机制</h1><ol>
<li>如何保证不同等级的会员通过不同的会员接待室进入会场？<br>有可能有些会员并不能正确的找到接待自己的接待室，也有可能有些会员冒充更高级的会员身份混进去，所以必须要有机制能够保证所有会员都被正确的接待室接待进入会场，而且一个会员只能被一个接待室接待，不能出现被两个接待室
重复接待的情况。如何设计这个接待规则呢？  </li>
<li>ClassLoader就设计了这样一种接待机制，即上级(双亲)委托接待机制。<br>任何一个会员到达任何一个会员接待室时，这个接待室首先会检查这个会员P是否已经被自己A接待过，如果已经接待过，则拒绝本次接待，如果自己没有接待过，那么会向上B询问这个会员是否应该在
上一级的更高级别的接待室B接待，上级接待室B会根据它们的接待规则，检查这个会员是否被自己B接待过，如果接待过，将已经接待的结果反馈下一级A，
如果也没有接待过，则向上一级询问这个会员P是否应该在上一级的更高级别的接待室接待，一直这样接待，直到有一级接待室接待或者告诉它
下一级这个会员不是自己接待的结果；  </li>
<li>如果这个会员来到的这个接待室A得到它上一级B的接待室反馈认为这个会员没有被接待，并且也不应该由它们BC接待，这个接待室A将会正式
接待这个会员，并发入会证明，这个会员就被定义为这个接待室等级的会员。  </li>
<li>整个JVM平台提供三层ClassLoader，这三层ClassLoader可以分为两种类型，可以理解为：为接待室服务的接待室和为会员服务的接待室两种。</li>
</ol>
<h2 id="1-BootstrapClassLoader"><a href="#1-BootstrapClassLoader" class="headerlink" title="1. BootstrapClassLoader"></a>1. BootstrapClassLoader</h2><p>这个ClassLoader就是接待室服务自身的，它主要加载JVM自身工作需要的类，这个ClassLoader完全是由JVM自己控制的，需要加载哪个类、
怎么加载都由JVM自己控制，别人也访问不到这个类，所以这个ClassLoader是不遵守前面介绍的加载规则的，它仅仅是一个类的加载工具而已，
既没有更高一级的父加载器，也没有子加载器。</p>
<h2 id="2-ExtClassLoader"><a href="#2-ExtClassLoader" class="headerlink" title="2. ExtClassLoader"></a>2. ExtClassLoader</h2><p>这个类加载器有点特殊，它是JVM自身的一部分，但是它的血统不是很纯正，它并不是JVM亲自实现的，我们可以理解为这个类加载器是那些与这个大会合作单位的员工会员，
这些会员既不是JVM内部的，也和普通的外部会员不同，所以就由这个类即在其来加载。它服务的特定目标在<code>System.getProperty(&quot;java.ext.dirs&quot;)</code>目录下。</p>
<h2 id="3-AppClassLoader"><a href="#3-AppClassLoader" class="headerlink" title="3. AppClassLoader"></a>3. AppClassLoader</h2><p>这个类加载器就是专门为接待会员服务的，它的父类是ExtClassLoader。它服务的目标是广大普通会员，所有在<code>System.getProperty(&quot;java.class.path&quot;)</code>
目录下的类都可以被这个类加载器加载，这个目录就是我们经常用到的classpath。</p>
<p>如果我们要实现自己的类加载器，不管你是直接实现抽象类ClassLoader，还是继承URLClassLoader类，或者其他子类，它的父加载器都是AppClassLoader，
因为不管调用哪个父类构造器，创建的对象都必须最终调用getSystemClassLoader()作为父加载器。而getSystemClassLoader()方法获取
到的正是AppClassLoader。<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E5%85%AD%E7%AB%A0/1-1.png?raw=true" alt="应用中类加载器的等级层次"><br>很多文章在介绍ClassLoader的等级结构时把Bootstrap ClassLoader也列在ExtClassLoader的上一级中，其实BootstrapClassLoader并不属于JVM的类等级层次，
因为BootstrapClassLoader并没有遵守ClassLoader的加载规则。另外BootstrapClassLoader并没有子类。<br>ExtClassLoader的父类也不是BootstrapClassLoader，ExtClassLoader并没有父类，我们在应用中能提取到的顶层父类是ExtClassLoader。<br>ExtClassLoader和AppClassLoader都位于sun.misc.Launcher类中，它们是Launcher类的内部类。<br>如果在Java应用中没有定义其他ClassLoader，那么除了<code>System.getProperty(&quot;java.ext.dirs&quot;)</code>目录下的类是由ExtClassLoader加载外，
其他类都由AppClassLoader加载。<br>JVM加载class文件到内存由两种方式。</p>
<ul>
<li>隐式加载：即不在代码里调用ClassLoader来加载所需要的类，而是通过JVM来自动加载所需要的类到内存的方式。例如，当我们在类中继承或者引用某个类时，
JVM在解析当前这个类时发现引用的类不在内存中，那么就会自动将这么类加载到内存中。</li>
<li>显式加载：即调用<code>this.getClass().getClassLoader().loadClass()</code>或者<code>Class.forName()</code>，或者我们自己实现的ClassLoader的findClass()方法等。<blockquote>
<p>ClassLoader().loadClass()底层是loadClass(name, false),即只加载不解析。而Class.forName()底层是forName0(className, true, ClassLoader.getClassLoader(caller), caller)，
即初始化。注意：在Java中，类装载分三步，对应三种状态，即：加载-&gt;链接(校验、准备、解析)-&gt;初始化。第一种对应的加载后，第二种对应的时链接后。<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E5%85%AD%E7%AB%A0/1-2.png?raw=true" alt="类装载"><br>例如：即要对驱动初始化才能使用就使用的后者加载Class.forName(“com.mysql.jdbc.Driver”)。</p>
</blockquote>
</li>
</ul>
<h1 id="2-如何加载class文件"><a href="#2-如何加载class文件" class="headerlink" title="2. 如何加载class文件"></a>2. 如何加载class文件</h1><p><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E5%85%AD%E7%AB%A0/1-3.png?raw=true" alt="JVM加载类">  </p>
<ul>
<li>找到.class文件，并把这个文件包含的字节码加载到内存中。</li>
<li>字节码验证、Class类数据结构分析、内存分配，符号表的链接。</li>
<li>[类中静态属性和初始化赋值][1]，以及静态块的执行等。</li>
</ul>
<h2 id="1-加载字节码到内存"><a href="#1-加载字节码到内存" class="headerlink" title="1. 加载字节码到内存"></a>1. 加载字节码到内存</h2><p>抽象类ClassLoader中并没有定义如何去加载，让子类具体实现找到指定类并把它的字节码加载到内存需要的子类中，
例如：URLClassLoader如何实现的findClass()方法，这个类底层通过URLClassPath取得要加载的class文件字节流，
而这个URLClassPath定义了到哪里去找这个class文件，如果找到了这个class文件，再读取它的byte字节流，通过
调用defineClass()方法来创建类对象。<br>URL数组是创建URLClassPath对象的必要条件。</p>
<h2 id="2-验证与解析"><a href="#2-验证与解析" class="headerlink" title="2. 验证与解析"></a>2. 验证与解析</h2><ul>
<li>字节码验证：确保格式正确、行为正确。</li>
<li>类准备：准备类中定义的字段、方法和实现接口所必须的数据结构</li>
<li>解析：类装入器装入类所引用的其他所有累。如超类(父类)、接口、字段、方法签名、方法中使用的本地变量。</li>
</ul>
<h2 id="3-初始化Class对象"><a href="#3-初始化Class对象" class="headerlink" title="3. 初始化Class对象"></a>3. 初始化Class对象</h2><p>在类中包含的静态初始化器都被执行，在这一阶段末尾静态字段被初始化为默认值。</p>
<h1 id="3-常见加载类错误分析"><a href="#3-常见加载类错误分析" class="headerlink" title="3. 常见加载类错误分析"></a>3. 常见加载类错误分析</h1><h2 id="1-ClassNotFoundException"><a href="#1-ClassNotFoundException" class="headerlink" title="1. ClassNotFoundException"></a>1. ClassNotFoundException</h2><p>JVM要加载指定文件的字节码到内存时，并没有找到这个文件对应的字节码文件，即.class文件不存在。解决的办法就是检查
在当前的classpath目录下有没有指定的文件存在。可通过以下命令：<br><code>this.getClass().getClassLoader().getResource(&quot;&quot;).toString()</code><br>获取之后结果，让我大吃一惊，这不是我用idea设置的output文件夹么，原来idea设置的output文件夹有这个作用！</p>
<h2 id="2-NoClassDefFoundError"><a href="#2-NoClassDefFoundError" class="headerlink" title="2.NoClassDefFoundError"></a>2.NoClassDefFoundError</h2><p>确保每个类引用的类都在当前的classpath下面。</p>
<h2 id="3-UnsatisfiedLinkError"><a href="#3-UnsatisfiedLinkError" class="headerlink" title="3. UnsatisfiedLinkError"></a>3. UnsatisfiedLinkError</h2><p>常见在JVM启动时，JVM中的某个lib删除了，可能会报这个错误（并这个lib中包含native标示的方法）。</p>
<h2 id="4-ClassCastException"><a href="#4-ClassCastException" class="headerlink" title="4. ClassCastException"></a>4. ClassCastException</h2><ul>
<li>对于普通对象，对象必须是目标类的实例或目标类的子类的实例。如果目标类是接口，那么 会把它当作实现了该接口的一个子类。</li>
<li><p>对于数组类型，目标类型必须是数组类型或java.lang.Object、java.lang.Cloneable、java.io.Serializable。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Integer[] a = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>&#125;;</div><div class="line">Object b = a;</div><div class="line">Cloneable c = a;</div><div class="line">Serializable d = a;</div><div class="line">System.out.println(b + <span class="string">","</span> + c + <span class="string">","</span> + d);</div><div class="line"><span class="comment">//output:[Ljava.lang.Integer;@78e03bb5,[Ljava.lang.Integer;@78e03bb5,[Ljava.lang.Integer;@78e03bb5</span></div></pre></td></tr></table></figure>
</li>
<li><p>建议先使用instanceof检查是不是目标类型，再进行强制类型转换。</p>
</li>
</ul>
<h2 id="5-ExceptionInInitializerError"><a href="#5-ExceptionInInitializerError" class="headerlink" title="5. ExceptionInInitializerError"></a>5. ExceptionInInitializerError</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map m = <span class="keyword">new</span> HashMap()&#123;</div><div class="line">        &#123;</div><div class="line">            m.put(<span class="string">"a"</span>,<span class="string">"2"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sss</span><span class="params">()</span> </span>&#123;</div><div class="line">    Integer s = (Integer) m.get(<span class="string">"a"</span>);</div><div class="line">    System.out.println(s);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>初始化类的时候，给静态属性m赋值出现了异常导致抛出错误。</p>
<h1 id="4-常用ClassLoader分析"><a href="#4-常用ClassLoader分析" class="headerlink" title="4. 常用ClassLoader分析"></a>4. 常用ClassLoader分析</h1><p>基于对Tomcat的源码分析，对部署在Tomcat的Servlet的项目，执行
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ClassLoader classLoader = <span class="keyword">this</span>.getClass().getClassLoader();</div><div class="line"><span class="keyword">while</span> (classLoader != <span class="keyword">null</span>) &#123;</div><div class="line">    System.out.println(classLoader.getClass().getCanonicalName());</div><div class="line">    classLoader = classLoader.getParent();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Tomcat本身自己实现了WebappClassLoader，会优先检查WebappClassLoader加载到额缓存，而不是JVM的findLoaderClass缓存。<br>并设置WebappClassLoadera的加载路径为WEB-INF/classes目录，查找文件的字节码，然后保存类的元信息，方便下次查找。
（前提是被查找的类再BootstrapClassLoader、ExtClassLoader、AppClassLoader等父加载器都反馈为不为他们加载）。</p>
<h1 id="5-如何实现自己的ClassLoader"><a href="#5-如何实现自己的ClassLoader" class="headerlink" title="5. 如何实现自己的ClassLoader"></a>5. 如何实现自己的ClassLoader</h1><p>ClassLoader能够完成的事情：</p>
<ul>
<li>在自定义路径下查找定义的class类文件，也许我们需要的class文件并不总在已经设置好的ClassPath下面，那么我们
必须想办法来找到这个类，这时，就需要自己实现一个ClassLoader。</li>
<li>对我们自己的要加载的类做特殊处理，如保证通过网络传输的类的安全性，可以将类经过加密后再传输，再加载到JVM
之前需对类的字节码再解码，这个过程就可以在自定义的ClassLoader中实现。</li>
<li>可以定义类的实现机制，我们可以检查已经加载的class文件是否被修改，如果修改了，可以重新加载这个类，从而实现
类的热部署。</li>
</ul>
<h2 id="1-加载自定义路径下的class文件"><a href="#1-加载自定义路径下的class文件" class="headerlink" title="1. 加载自定义路径下的class文件"></a>1. 加载自定义路径下的class文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String classPath;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String packageName = <span class="string">"com.lwg.classknow"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String classPath)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.classPath = classPath;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        <span class="keyword">if</span> (name.startsWith(packageName)) &#123;</div><div class="line">            <span class="comment">// 这里写从自己的缓冲中寻找，找到就直接返回。</span></div><div class="line">            <span class="keyword">byte</span>[] classData = getData(name);</div><div class="line">            <span class="keyword">if</span> (classData == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 这里写放入自己的缓存中，或者注册到一个Bean管理器，统一管理等。</span></div><div class="line">                <span class="keyword">return</span> defineClass(name, classData, <span class="number">0</span>, classData.length);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getData(String className) &#123;</div><div class="line">        String path = classPath + File.separator + className.replace(<span class="string">'.'</span>, File.separatorChar) + <span class="string">".class"</span>;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="comment">// 如果是通过某种加密的文件，则这么可以进行特殊的解密</span></div><div class="line">            InputStream is = <span class="keyword">new</span> FileInputStream(path);</div><div class="line">            ByteArrayOutputStream stream = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> ((num = is.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">                stream.write(buffer, <span class="number">0</span>, num);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> stream.toByteArray();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span> </span>&#123;</div><div class="line">        PathClassLoader loader = <span class="keyword">new</span> PathClassLoader(<span class="string">"C:\\lwg\\lwg\\out\\production\\lwg"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class cus = loader.findClass(<span class="string">"com.lwg.classknow.classloader.ssss"</span>);</div><div class="line">            System.out.println(cus); <span class="comment">//output:class com.lwg.classknow.classloader.ssss</span></div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有直接继承URLClassLoader(下面代码没有经过验证):
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLPathClassLoader</span> <span class="keyword">extends</span> <span class="title">URLClassLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String packageName = <span class="string">"com.lwg.classknow.classloader"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">URLPathClassLoader</span><span class="params">(URL[] urls, ClassLoader parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(urls, parent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        Class&lt;?&gt; clz = findLoadedClass(name);</div><div class="line">        <span class="keyword">if</span> (clz != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> clz;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!packageName.startsWith(name)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> findClass(name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, MalformedURLException </span>&#123;</div><div class="line">        URLPathClassLoader loader = <span class="keyword">new</span> URLPathClassLoader(<span class="keyword">new</span> URL[]&#123;<span class="keyword">new</span> URL(<span class="string">"http://www.xxx.com"</span>)&#125;, <span class="keyword">null</span>);</div><div class="line">        loader.findClass(<span class="string">"com.lwg.classknow.classloader.ssss"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="6-实现类的热部署"><a href="#6-实现类的热部署" class="headerlink" title="6. 实现类的热部署"></a>6. 实现类的热部署</h1><p>JVM在加载类之前会检查请求的类是否已经被加载起来，也就是要调用findLoaderClass()方法查看是否能偶返回类实例。如果类已经加载过来，再调用
loadClass()将会导致类冲突。但是JVM标示一个类是否是同一个类会有两个条件。</p>
<ul>
<li>类的完整类名是否一样，这个类名包括类所在的包名。</li>
<li>加载这个类的ClassLoader是否是同一个实例。<br>所以要实现类的热部署可以创建不同的ClassLoader的实例对象，然后通过对这个不同的实例对象来加载同名的类。</li>
</ul>
<p>使用不同的ClassLoader实例加载同一个类，会不会导致JVM的PermGen区无限增大？答案是否定的，因为我们的ClassLoader对象也会和其他对象一样，
当没有对象再引用它以后，也会被JVM回收。但是需要注意的一点是，被这个ClassLoader加载的类的字节码会保存在JVM的PermGen区，这个数据一般
只是在执行Full GC时才会被回收的，所以如果在你的应用中都是大量的动态类加载，Full GC又不是太频繁，也要注意PermGen区的大小，防止内存溢出。</p>
<h1 id="7-Java应不应该动态加载类"><a href="#7-Java应不应该动态加载类" class="headerlink" title="7. Java应不应该动态加载类"></a>7. Java应不应该动态加载类</h1><p>我想大家都知道用Java有一个痛处，就是修改一个类，必须要重启一遍，很费时。于是就想能不能来个动态类的加载而不需要重启JVM，如果你了解JVM
的工作机制，就应该放弃这个念头。<br>Java的优势正是基于共享对象的机制，达到信息的高度共享，也就是通过保存并持有对象的状态而省去类信息的重复创建和回收。我们知道对象一旦被创建，
这个对象就可以被人持有和引用。<br>假如，我们能够动态加载一个对象进入JVM，但是如何做到JVM中对象的平滑过渡？几乎不可能！虽然在JVM中对象只有一份，在理论上可以直接诶替换这个
对象，然后更新Java栈中所有对原对象的引用关系。看起来好像对象可以被替换了，但是这仍然不可行，因为它违反了JVM的设计原则，对象的引用关系
只有对象的创建者持有和使用，JVM不可以干预对象的引用关系，因为JVM并不知道对象是怎么被使用的，这就涉及JVM并不知道对象的运行时类型
而只知道编译时类型。<br>假如一个对象的属性结构被修改，但是在运行时其他对象可能仍然引用该属性。<br>虽然完全的无障碍的替换时不现实的，但是如果你非要那么做，也还是可以。前面的分析造成不能动态提供类对象的关键是，对象的状态被保存了，
并且被其他对象引用了，一个简单的解决方法就是不保存对象的状态，对象被创建使用后被释放掉，下次修改后，对象也就是新的了。<br>这就是JSP，动态的加载类，所有其他解释型语言都是如此。</p>
<h1 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h1><p>ClassLoader的基本工作机制，以及双亲委派机制的解释，自己创建ClassLoader以及热部署的原理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-ClassLoader的等级加载机制&quot;&gt;&lt;a href=&quot;#1-ClassLoader的等级加载机制&quot; class=&quot;headerlink&quot; title=&quot;1. ClassLoader的等级加载机制&quot;&gt;&lt;/a&gt;1. ClassLoader的等级加载机制&lt;/h1
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="深入分析Java_Web技术" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java-Web%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>五、深入class文件结构</title>
    <link href="http://yoursite.com/2017/08/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E6%B7%B1%E5%85%A5class%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/08/10/读书笔记/深入分析Java_Web技术/第五章：深入class文件结构/</id>
    <published>2017-08-10T14:06:20.000Z</published>
    <updated>2017-08-10T15:18:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-JVM指令集简介"><a href="#1-JVM指令集简介" class="headerlink" title="1. JVM指令集简介"></a>1. JVM指令集简介</h1><p>前言：<br>从底层讲解Java为什么是“一次编译导出运行”，以及一个class文件的内容。<br>在分析class文件之前我们先学会使用Oolong汇编语言，它能将class文件的二进制表示的结构形式先转化成能够理解的汇编语言。下载Oolong.jar
包后将其放在jdk的lib目录下，然后增加一个CLASSPATH精准的指向该Oolong.jar目录。
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lwg.classknow;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.printf(<span class="string">"junshan say: Hello World"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在当前class文件目录下，命令行输入:<code>java COM.sootNsmoke.oolong.Gnoloo Message.class</code>即可获得Message.j文件，如下：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">.source Message.java</div><div class="line">.class public super com/lwg/classknow/Message</div><div class="line">.super java/lang/Object</div><div class="line"></div><div class="line"></div><div class="line">.method public &lt;init&gt; ()V</div><div class="line">.limit stack 1</div><div class="line">.limit locals 1</div><div class="line">.var 0 is this Lcom/lwg/classknow/Message; from l0 to l5</div><div class="line">.line 3</div><div class="line">l0:    aload_0</div><div class="line">l1:    invokespecial java/lang/Object/&lt;init&gt; ()V</div><div class="line">l4:    return</div><div class="line"></div><div class="line">.end method</div><div class="line"></div><div class="line">.method public static main ([Ljava/lang/String;)V</div><div class="line">.limit stack 3</div><div class="line">.limit locals 1</div><div class="line">.var 0 is args [Ljava/lang/String; from l0 to l14</div><div class="line">.line 5</div><div class="line">l0:    getstatic java/lang/System/out Ljava/io/PrintStream;</div><div class="line">l3:    ldc &quot;junshan say: Hello World&quot;</div><div class="line">l5:    iconst_0</div><div class="line">l6:    anewarray java/lang/Object</div><div class="line">l9:    invokevirtual java/io/PrintStream/printf (Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;</div><div class="line">l12:    pop</div><div class="line">.line 6</div><div class="line">l13:    return</div><div class="line"></div><div class="line">.end method</div></pre></td></tr></table></figure></p>
<p>汇编比较复杂，就不深究了，但是要知道，跨平台其实是JVM的跨平台，.java-&gt;.class-&gt;JVM(跨平台)-&gt;机器码(平台)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-JVM指令集简介&quot;&gt;&lt;a href=&quot;#1-JVM指令集简介&quot; class=&quot;headerlink&quot; title=&quot;1. JVM指令集简介&quot;&gt;&lt;/a&gt;1. JVM指令集简介&lt;/h1&gt;&lt;p&gt;前言：&lt;br&gt;从底层讲解Java为什么是“一次编译导出运行”，以及一个c
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="深入分析Java_Web技术" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java-Web%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>四、Javac编译原理</title>
    <link href="http://yoursite.com/2017/08/08/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9AJavac%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2017/08/08/读书笔记/深入分析Java_Web技术/第四章：Javac编译原理/</id>
    <published>2017-08-08T02:21:21.000Z</published>
    <updated>2017-08-10T14:03:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Javac是什么"><a href="#1-Javac是什么" class="headerlink" title="1. Javac是什么"></a>1. Javac是什么</h1><p>前言：<br>Java语言与Java语言规范，Java虚拟机有Java虚拟机规范，如何让Java的语法规则适应Java虚拟机的语法规范呢？它的任务就是
由Javac编译器完成的，将Java语言规范转化为Java虚拟机语言规范，完成“翻译”工作。
Javac是一种编译器，将一种语言规范转化成另外一种语言规范。虽然机器码执行非常高效，但是对人不友好，开发这个代码
的成本远远高于省下的机器的执行成本，所以才有了编译器的出现，有了编译器才有可能出现这么多的高级编程语言。<br>关于具体的机器，平台，Javac是不管的，这是JVM的事情，Javac的任务就是将Java源代码语言先转化成JVM能够识别的
一种语言，然后由JVM将JVM语言再转化为当前这个机器能够识别的机器语言。<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E5%9B%9B%E7%AB%A0/1-1.png?raw=true" alt="Javac"><br>表面上Javac的任务就是将Java源码编译成Java字节码，也就是JVM能够识别的二进制码，即.java-&gt;.class的转化
而实际上Java的源码转为一连串二进制数字，这些二进制数字是有格式的，只有JVM能够正确识别它们表达的意思。</p>
<h1 id="2-Javac编译器的基本结构"><a href="#2-Javac编译器的基本结构" class="headerlink" title="2. Javac编译器的基本结构"></a>2. Javac编译器的基本结构</h1><p>必须要先知道一个编译器完成一个语言规范到另一种语言规范的转化需要哪些步骤，如何完成这些步骤，也就是这个编译器
的基本结构是什么。  </p>
<ul>
<li>词法分析：首先，读取源代码，一个字节为一节地都进来，找出这些字节中哪些是我们定义的语法关键字，如Java中的if、else等关键词：
要识别哪些if是合法的关键词，哪些不是，这个步骤就是词法分析过程。<br>词法分析的结构就是从源代码中找出一些规范化的Token流，就像在人类预言中，一句话中哪些是词语，哪些是标点符号，哪些是
动词，哪些是名词等。  </li>
<li>语法分析：接着就是对Token流进行语法分析，即检查是不是符合Java语言规范，如if的后面是不是紧跟着一个布尔判断表达式。就像人类<br>语言是不是有主谓宾。<br>语法分析的结果就是形成一个符合Java语言规范的抽象语法树，对这棵语法树我们可以在后面按照新的规则再重新组织。<br>语法分析之后的结果是符合规范的。</li>
<li>词义分析：的结果就是将复杂的语法转化成最简单的语法，对应到Java中，如将foreach转成for循环结构，还有注
解等，最后形成一个注解过后的抽象语法树，这棵语法树更接近目标语言的语法规则。  </li>
<li>代码生成器：就是最后生成符合Java虚拟机规范的字节码了。<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E5%9B%9B%E7%AB%A0/1-2.png?raw=true" alt="Javac组件"><br>即：主要四个模块：词法分析器、语法分析器、词义分析器、代码生成器。</li>
</ul>
<h1 id="3-Javac工作原理分析"><a href="#3-Javac工作原理分析" class="headerlink" title="3. Javac工作原理分析"></a>3. Javac工作原理分析</h1><h2 id="1-词法分析器"><a href="#1-词法分析器" class="headerlink" title="1. 词法分析器"></a>1. 词法分析器</h2><p>从源文件的第一个字符开始，按照Java语法规范依次找出package、import、类定义以及属性和方法定义等，最后生成一个Token流。<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E5%9B%9B%E7%AB%A0/1-3.png?raw=true" alt="Token流"><br>其中有两个关键点：</p>
<ul>
<li>Javac是如何分辨这一个个Token的呢？例如，它怎么知道package就是一个Token.PACKAGE,而不是用户自定义的Token.
IDENTIFIEDR的名称呢?</li>
<li>Javac是如何分辨一个Token的，如compile这个词就是一个Token，为什么不是com或者comp抑或compi等，也就是Javac是如何知道
哪些字符组合在一起就是一个Token的呢？</li>
</ul>
<p>答案是：Java有特定的语法规则，即空格分词，第一个是package，一行结束最后必然是}或者;等。<br>而Token类似一个key、value的数据结构，PACKAGE:package。</p>
<h2 id="2-语法分析器"><a href="#2-语法分析器" class="headerlink" title="2. 语法分析器"></a>2. 语法分析器</h2><p>获得了Token流，接着，获取每个token的值，根据Java语法规则，进行顺序的，使用不同的解析方法进行解析，例如发现这个Token是import，则使用import语法分析，检查是否有static关键字
等，判断是否静态引入。<br>接着进行类的解析，包括interface、class、enum等，分别进行语法分析。<br>最后进行classBody的解析，即按照变量定义解析、方法定义解析和内部类定义解析进行的。这个过程比较复杂，将结果保存再list集合中，最后添加到class（假如是class）树中。<br>例如下面的class和语法树的对应关系：
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yufa</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> c = a + <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getC</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.c = c;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E5%9B%9B%E7%AB%A0/1-4.png?raw=true" alt="class对应的语法树"><br>部分节点在图中省略了。最后这个类节点加入到这个类对应的包路径的顶层节点中：<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E5%9B%9B%E7%AB%A0/1-5.png?raw=true" alt="包语法树"></p>
<h2 id="3-语义分析器"><a href="#3-语义分析器" class="headerlink" title="3. 语义分析器"></a>3. 语义分析器</h2><p>我们需要将树进行细化，例如：添加默认的构造函数，检查变量在使用前是否初始化，将一些常量进行合并处理，检查操作变量类型是否匹配，
检查checked exception异常是否已经捕获或抛出，解除Java的语法糖等等，还有符号，有专门的类进行完成。<br>还有专门进行处理annotation（注解）分析，以及变量的自动转化，包装等。<br>内部类是如何解析的呢？
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yuyi</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Inner inner = <span class="keyword">new</span> Inner();</div><div class="line">        inner.print();</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"print"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后被解析成：
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yuyi</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Yuyi</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Yuyi$Inner inner = <span class="keyword">new</span> Yuyi$Inner(<span class="keyword">this</span>);</div><div class="line">        inner.print();</div><div class="line">    &#125;</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yuyi</span>$<span class="title">Inner</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">final</span> Yuyi <span class="keyword">this</span>$<span class="number">0</span>;</div><div class="line">    </div><div class="line">    Yuyi$Inner(<span class="keyword">final</span> Yuyi <span class="keyword">this</span>$<span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span> = <span class="keyword">this</span>$<span class="number">0</span>;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"print"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>内部类会有外部类对象的引用，并且会独立出来。</p>
<h2 id="4-代码生成器"><a href="#4-代码生成器" class="headerlink" title="4. 代码生成器"></a>4. 代码生成器</h2><h1 id="4-设计模式解析之访问者模式"><a href="#4-设计模式解析之访问者模式" class="headerlink" title="4. 设计模式解析之访问者模式"></a>4. 设计模式解析之访问者模式</h1><p>遍历语法树，都会进行不同的处理工作，同时也对这棵语法树进行进一步处理。实际采用的访问者模式设计，每次遍历都是
一次访问者的执行过程。<br>访问者，得到被访问者的实例，并进行操作。
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Visitor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(JCCompiletionUnit_tree jcCompiletionUnitTree)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(JCIf_tree jcIfTree)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Attr_visitor</span> <span class="keyword">extends</span> <span class="title">Visitor</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(JCCompiletionUnit_tree jcCompiletionUnitTree)</span> </span>&#123;</div><div class="line">        jcCompiletionUnitTree.length  = <span class="number">2</span>;</div><div class="line">        System.out.println(<span class="string">"Attr_visitor修改Unit_tree"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(JCIf_tree jcIfTree)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Attr_visitor修改JCIf_tree"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Enter_visitor</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(JCCompiletionUnit_tree jcCompiletionUnitTree)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Enter_visitor修改Unit_tree"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(JCIf_tree jcIfTree)</span> </span>&#123;</div><div class="line">        jcIfTree.length = <span class="number">3</span>;</div><div class="line">        System.out.println(<span class="string">"Enter_visitor修改Unit_tree"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>被访问者，有个接受访问者的方法，接着将自己放入到这个被访问者中，比较绕：
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> Integer length;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tree</span> <span class="params">(Integer length)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.length = length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLength</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(Integer length)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.length = length;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JCIf_tree</span> <span class="keyword">extends</span> <span class="title">Tree</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JCIf_tree</span><span class="params">(Integer length)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"被访问者的JCIf方法"</span>);</div><div class="line">        visitor.visit(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JCCompiletionUnit_tree</span> <span class="keyword">extends</span> <span class="title">Tree</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JCCompiletionUnit_tree</span><span class="params">(Integer length)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"被访问者的unit方法"</span>);</div><div class="line">        visitor.visit(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后是主函数：
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line"></div><div class="line">    List&lt;Tree&gt; trees = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Tree tree)</span> </span>&#123;</div><div class="line">        trees.add(tree);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Tree tree : trees) &#123;</div><div class="line">            tree.accept(visitor);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVisitorPattrn</span><span class="params">()</span></span>&#123;</div><div class="line">        Visitor attr_visitor = <span class="keyword">new</span> Attr_visitor();</div><div class="line">        Demo demo = <span class="keyword">new</span> Demo();</div><div class="line">        Tree jcCompiletionUnit_tree = <span class="keyword">new</span> JCCompiletionUnit_tree(<span class="number">0</span>);</div><div class="line">        Tree jcif_tree = <span class="keyword">new</span> JCIf_tree(<span class="number">0</span>);</div><div class="line">        demo.add(jcCompiletionUnit_tree);</div><div class="line">        demo.add(jcif_tree);</div><div class="line">        demo.print(attr_visitor);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>基于编译器原理，讲解Javac的编译以及使用的设计模式，访问者模式，遍历语法树。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Javac是什么&quot;&gt;&lt;a href=&quot;#1-Javac是什么&quot; class=&quot;headerlink&quot; title=&quot;1. Javac是什么&quot;&gt;&lt;/a&gt;1. Javac是什么&lt;/h1&gt;&lt;p&gt;前言：&lt;br&gt;Java语言与Java语言规范，Java虚拟机有Java虚
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="深入分析Java_Web技术" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java-Web%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>三、深入分析Java Web中的中文编码问题</title>
    <link href="http://yoursite.com/2017/08/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java%20Web%E4%B8%AD%E7%9A%84%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/08/07/读书笔记/深入分析Java_Web技术/第三章：深入分析Java Web中的中文编码问题/</id>
    <published>2017-08-07T14:56:30.000Z</published>
    <updated>2017-08-08T17:31:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-几种常见的编码格式"><a href="#1-几种常见的编码格式" class="headerlink" title="1. 几种常见的编码格式"></a>1. 几种常见的编码格式</h1><h2 id="1-为什么需要编码？"><a href="#1-为什么需要编码？" class="headerlink" title="1. 为什么需要编码？"></a>1. 为什么需要编码？</h2><ul>
<li>计算机中存储信息的最小单位是1个字节，即8个bit，所以能表示的字符范围是2^8=256个。</li>
<li>人类符号过于复杂，至少一个几个字节才能满足人类的一个单位。</li>
</ul>
<h2 id="2-常见编码"><a href="#2-常见编码" class="headerlink" title="2. 常见编码"></a>2. 常见编码</h2><p>编码即就是人类的字符-&gt;机器的字符的过程。</p>
<h3 id="1-ASCII码"><a href="#1-ASCII码" class="headerlink" title="1. ASCII码"></a>1. ASCII码</h3><p>总共有128个，用1个字节的低七位表示，0~31是控制字符，如换行、回车、删除，32~126是打印字符，可以通过键盘输入并且能够显示出来。</p>
<h3 id="2-ISO-8859-1"><a href="#2-ISO-8859-1" class="headerlink" title="2. ISO-8859-1"></a>2. ISO-8859-1</h3><p>128个字符显示是不够的，于是ISO组织在ASCII码基础上又制定了一系列标准来扩展ASCII编码，他们是ISO-8859-1至ISO-8859-15。ISO-8859-1仍然
是单字节编码，它总共能表示256个字符。</p>
<h3 id="3-GB2312"><a href="#3-GB2312" class="headerlink" title="3. GB2312"></a>3. GB2312</h3><p>GB2312全称是《信息技术·中文编码字符集》，总的编码范围是：A1~F7。它是双字节编码。包含了符号以及汉字。</p>
<h3 id="4-GBK"><a href="#4-GBK" class="headerlink" title="4. GBK"></a>4. GBK</h3><p>GBK全称是《汉字内码扩展规范》，是国家技术监督局为Windows95所制定新的汉字内码规范，它的出现是为了扩展GB2312，并加入更多的汉字。
编码范围是8140~FEFE，总共23940，表示21003个汉字，编码是和GB2312兼容，也就是GB2312编码的汉字可以用GBK解码，不会乱码。</p>
<h3 id="5-GB18030"><a href="#5-GB18030" class="headerlink" title="5. GB18030"></a>5. GB18030</h3><p>应用不广泛，与GB2312兼容</p>
<h3 id="6-UTF-16"><a href="#6-UTF-16" class="headerlink" title="6. UTF-16"></a>6. UTF-16</h3><p>Unicode（Universal Code统一码），ISO试图创建一个全新的超语言字典，世界上所有的语言都可以通过这个字典来相互翻译。可想而知这个字典是多么
复杂。Unicode是Java和XML的基础。<br>UTF-16具体定义了Unicode字符在计算机中的存取方法，UTF-16用两个字节来表示Unicode的转化格式，它采用定长的表示方法，即不论什么字符都可以用
两个字节表示。<br>两个字节是16个bit，所以叫UTF-16。UTF-16表示字符非常方便，每两个字节表示一个字符，简化了字符串操作，这也是Java以UTF-16作为内存的字符存储
格式的一个重要的原因。</p>
<h3 id="7-UTF-8"><a href="#7-UTF-8" class="headerlink" title="7. UTF-8"></a>7. UTF-8</h3><p>UTF-16统一采用两个字节表示一个字符，虽然表示上简单方便，但是也有其缺点，很大一部分字符用一个字节就可以表示的现在要用两个字节表示，存储空间
放大了一倍。而UTF-8采用了一种变长技术，每个编码区域有不同的字码长度。不同类型的字符可以由1~6个字节组成。</p>
<ul>
<li>如果是一个字节。最高为为0，则表示这是一个ASCII字符，可见，所有ASCII编码已经是UTF-8了。</li>
<li>如果是一个字节，以11开头，则连续的1的个数暗示这个字符的字节数。例如：110xxxxx代表它是双字节UTF-8字符的首字节。</li>
<li>如果是一个字节，以10开始，表示它不是首字节，需要向前查找才能得到当前字符的首字节。</li>
</ul>
<h2 id="2-编码的场景"><a href="#2-编码的场景" class="headerlink" title="2. 编码的场景"></a>2. 编码的场景</h2><h3 id="1-I-O操作"><a href="#1-I-O操作" class="headerlink" title="1. I/O操作"></a>1. I/O操作</h3><p>Reader类和InputStream之间的InputStreamReader，通过StreamDecoder以及StreamEncoder进行字符和字节的转换，在解码过程必须指定编码格式，
否则按系统编码。
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">String file = <span class="string">"D:\\source\\eclipse\\liwen\\src\\main\\java\\liwen\\com\\io\\data.txt"</span>;</div><div class="line">String charset = <span class="string">"UTF-8"</span>;</div><div class="line">FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">OutputStreamWriter writer = <span class="keyword">new</span> OutputStreamWriter(fileOutputStream);</div><div class="line">writer.write(<span class="string">"这是要保存的中文字符"</span>);</div><div class="line">writer.close();</div><div class="line"></div><div class="line">FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(fileInputStream, charset);</div><div class="line"></div><div class="line"><span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</div><div class="line"><span class="keyword">while</span>((count = reader.read(buf)) != -<span class="number">1</span>) &#123;</div><div class="line">    buffer.append(buf, <span class="number">0</span>, count);</div><div class="line">&#125;</div><div class="line">System.out.print(buffer.toString());</div><div class="line">reader.close();</div></pre></td></tr></table></figure></p>
<h3 id="2-在内存操作中的编码"><a href="#2-在内存操作中的编码" class="headerlink" title="2. 在内存操作中的编码"></a>2. 在内存操作中的编码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种，通过字符串操作</span></div><div class="line">String s = <span class="string">"中文"</span>;</div><div class="line"><span class="keyword">byte</span>[] b = s.getBytes(<span class="string">"UTF-8"</span>);</div><div class="line">String n = <span class="keyword">new</span> String(b, <span class="string">"UTF-8"</span>);</div><div class="line">System.out.print(n);</div><div class="line"></div><div class="line"><span class="comment">// 第二种，通过nio中的Charset与Buffer实现编码解码。</span></div><div class="line">Charset charset = Charset.forName(<span class="string">"UTF-8"</span>);</div><div class="line">ByteBuffer buffer = charset.encode(s);       <span class="comment">//字符转字节</span></div><div class="line">CharBuffer buffer1 = charset.decode(buffer); <span class="comment">//字节转字符</span></div><div class="line"><span class="keyword">char</span>[] a = buffer1.array();</div><div class="line">System.out.print(a);</div><div class="line"></div><div class="line"><span class="comment">// 第三种，通过将16bit的char拆分为2个8bit的byte，没有编码解码，只是软转化</span></div><div class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line">ByteBuffer byteBuffer1 = byteBuffer.putChar(<span class="string">'a'</span>);</div></pre></td></tr></table></figure>
<h1 id="3-在Java中如何编解码"><a href="#3-在Java中如何编解码" class="headerlink" title="3. 在Java中如何编解码"></a>3. 在Java中如何编解码</h1><p>UTF_32，GBK等编码都是继承自Charset（查看GB18030类的源码，会让你大吃一惊）。<br>Java内存编码采用的UTF-16编码，编码效率高，虽然用双字节存储，但是不适合网络之间传输，因为网络传输容易损坏字节流，当一个字节损坏，就两个字节没用了，UTF-8更适合网络传输。<br>UTF-8对ASCII字符采用单字节存储，另外单个字符损坏也不会影响后面的其他字符，编码效率上介于GBK和
UTF-16之间，所以UTF-8在编码效率上和编码安全性上做了平衡，是理想的中文编码方式。</p>
<h1 id="4-在Java-Web中设计的编解码"><a href="#4-在Java-Web中设计的编解码" class="headerlink" title="4. 在Java Web中设计的编解码"></a>4. 在Java Web中设计的编解码</h1><p>有I/O的地方就会涉及编码。网络传输都是以字节为单位的，所以所有的数据必须能够被序列化，即继承Serializable。<br>一个文本的实际大小应该怎么计算。例如：把整型数字1234567当做字符哎存储，则采用UTF-8编码会占用7个字节，采用UTF-16编码<br>会占用14个字节，但是当把它当成int类型的数字来存储则只需要4个字节。<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%89%E7%AB%A0/1-1.png?raw=true" alt="HTTP请求的编码示例"></p>
<h2 id="1-URL的编码"><a href="#1-URL的编码" class="headerlink" title="1. URL的编码"></a>1. URL的编码</h2><p><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%89%E7%AB%A0/1-2.png?raw=true" alt="URL"><br>其中浏览器对PathInfo和QueryString是编码不同的，因此服务器分别在不同的地方对其进行解码。<br>例如Tomcat先判断URIEncoding是否有定义，如果没有则默认使用ISO-8859-1解析。<br>而QueryString，无论POST请求还是GET请求，对它们的解码都是在request.getParameters()方法中，当然内部对POST和GET解码是不同的。<br>其中GET请求，是通过HTTP的Header传到服务端的，是通过useBodyEncodingForURL设置。因此在服务器最好设置URIEncoding和useBodyEncoding两个参数。</p>
<h2 id="2-HTTP-Header的编解码"><a href="#2-HTTP-Header的编解码" class="headerlink" title="2. HTTP Header的编解码"></a>2. HTTP Header的编解码</h2><p>如Cookie等，一些头信息，Tomcat对Header解码是在调用request.getHeader()方法时进行的。如果有非ASCII字符，使用URLEncoder进行编码，网络传输。</p>
<h2 id="3-POST表单的编解码"><a href="#3-POST表单的编解码" class="headerlink" title="3. POST表单的编解码"></a>3. POST表单的编解码</h2><p>提交时，浏览器先根据ContentType的Charset编码进行参数编码，然后再提交到服务端，服务端同样也用ContentType中的字符集进行解码。服务端可以通过
request.setCharacterEncoding(charset)来设置。<br>注意：要在第一次调用request.getParameter()方法之前就设置request.setCharacterEncoding(charset)。<br>如果服务端没有设置request.setCharacterEncoding(charset)，那么表单提交的数据将会按照系统的默认编码方式解析。<br>另外，针对multipart/form-data类型的参数，即上传文件，也是通过ContentType定义的字符编码。上传文件是用字节流的方式传输到服务器的本地
临时目录，这个过程并没有涉及字符编码，而真正编码是在讲文件内容添加到parameters，如果用这个不能编码，则会使用默认的ISO-8859-1编码。</p>
<h2 id="4-HTTP-BODY的编解码"><a href="#4-HTTP-BODY的编解码" class="headerlink" title="4. HTTP BODY的编解码"></a>4. HTTP BODY的编解码</h2><p>通过Response返回给客户端浏览器。这个过程要经过编码，即response.setCharcterEncoding()来设置，它将会覆盖request.getCharacterEncoding()
的值，并通过Header的Content-Type返回客户端，浏览器接收到返回的Socket流时将通过Content-Type的charset来解码。如果返回的HTTP Header中Content-Type
没有设置charset，那么浏览器将根据浏览器的<mete http-equiv="Content-Type" content="text/html; charset=GBK">中的charset来解码，
如果浏览器中没有定义，则使用默认的编码。<br>连接JDBC也是指定一致的编码：<code>jdbc:mysql://localhost:3306?DB?useUnicode=true&amp;characterEncoding=GBK</code>。</mete></p>
<h1 id="5-在JS的编码"><a href="#5-在JS的编码" class="headerlink" title="5. 在JS的编码"></a>5. 在JS的编码</h1><h2 id="1-外部引入JS文件"><a href="#1-外部引入JS文件" class="headerlink" title="1. 外部引入JS文件"></a>1. 外部引入JS文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script scr=<span class="string">"script.js"</span> charset=<span class="string">"gbk"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>而script.js脚本中，有如下代码：
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">"中国"</span>);</div></pre></td></tr></table></figure></p>
<p>如果引入的时候没有设置charset，浏览器就会以当前页面的默认字符集解析这个JS文件。如果一致那就没问题，但是如果页面和js字符编码不一致，就会变成乱码。</p>
<h2 id="2-JS的URL编码"><a href="#2-JS的URL编码" class="headerlink" title="2. JS的URL编码"></a>2. JS的URL编码</h2><h3 id="1-escape"><a href="#1-escape" class="headerlink" title="1. escape()"></a>1. escape()</h3><p><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%89%E7%AB%A0/1-3.png?raw=true" alt="escape()与unescape()"><br>这组函数已经从ECMAScript v3标准删除了，URL的编码可以用encodeURI和encodeURIComponent来代替。</p>
<h3 id="2-encodeURI"><a href="#2-encodeURI" class="headerlink" title="2. encodeURI()"></a>2. encodeURI()</h3><p><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%89%E7%AB%A0/1-4.png?raw=true" alt="encodeURI()和decodeURI()"><br>对某些特殊的字符不进行编码如<code>!</code>、<code>a-z</code>、<code>A-Z</code>、<code>0-9</code>、<code>=</code>、<code>@</code>、<code>?</code>、<code>;</code>、<code>:</code>、<code>-</code>、<code>+</code>、<code>(</code>、<code>)</code>、<code>&amp;</code>、<code>#</code>、<code>.</code>、<code>~</code>、<code>*</code>。</p>
<h3 id="3-encodeURIComponent"><a href="#3-encodeURIComponent" class="headerlink" title="3. encodeURIComponent()"></a>3. encodeURIComponent()</h3><p><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%89%E7%AB%A0/1-5.png?raw=true" alt="encodeURIComponent()和decodeURIComponent"><br>编码更加彻底，用于整个URL编码，因为它将<code>&amp;</code>也编码了。除了<code>!</code>、<code>a-z</code>、<code>A-Z</code>、<code>0-9</code>、<code>-</code>、、<code>.</code>、<code>~</code>、<code>*</code>。</p>
<h3 id="4-Java与JS编解码问题"><a href="#4-Java与JS编解码问题" class="headerlink" title="4. Java与JS编解码问题"></a>4. Java与JS编解码问题</h3><p>Java端处理URL编解码有两个类，分别是URLEncoder和URLDecoder。这两个类可以将所有“%”加UTF-8码值用UTF-8解码，从而得到原始的值。<br>对应的前端JS是encodeURIComponent和decodeURLComponent。注意，前端用encodeURIComponent，服务端用URLDecoder解码可能会乱码，
可能是两个字符编码类型不一致，JS编码默认是UTF-8编码，而服务端中文解码一般都是GBK或者GB2312，所以encodeURIComponent编码后是
UTF-8，而Java用GBK去解码显然不对。<br>解决方式是encodeURIComponent两次编码，服务端使用request.getParameter()用GBK解码后，再用UTF-8解码。</p>
<h1 id="6-常见编码问题"><a href="#6-常见编码问题" class="headerlink" title="6. 常见编码问题"></a>6. 常见编码问题</h1><h2 id="1-中文变成看不懂的字符"><a href="#1-中文变成看不懂的字符" class="headerlink" title="1. 中文变成看不懂的字符"></a>1. 中文变成看不懂的字符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String a = <span class="string">"淘！我喜欢！"</span>;</div><div class="line"><span class="keyword">byte</span>[] b = a.getBytes(<span class="string">"GBK"</span>);  <span class="comment">//可以表示中文，占两个字节</span></div><div class="line">String c = <span class="keyword">new</span> String(b, <span class="string">"ISO-8859-1"</span>);  <span class="comment">//将两个字节分别作为一个单独的字符显示</span></div><div class="line">System.out.println(c); <span class="comment">// output: ÌÔ£¡ÎÒÏ²»¶£¡</span></div></pre></td></tr></table></figure>
<p>双字节变成单字节<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%89%E7%AB%A0/1-6.png?raw=true" alt="中文变成看不懂的字符"></p>
<h2 id="2-中文变成一个问号"><a href="#2-中文变成一个问号" class="headerlink" title="2. 中文变成一个问号"></a>2. 中文变成一个问号</h2><p><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%89%E7%AB%A0/1-7.png?raw=true" alt="中文变成问号">
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String a = <span class="string">"淘！我喜欢！"</span>;</div><div class="line"><span class="keyword">byte</span>[] b = a.getBytes(<span class="string">"ISO-8859-1"</span>);    <span class="comment">//找不到对应的字符</span></div><div class="line">String c = <span class="keyword">new</span> String(b, <span class="string">"ISO-8859-1"</span>);</div><div class="line">System.out.println(c); <span class="comment">// ??????</span></div></pre></td></tr></table></figure></p>
<h2 id="3-中文变成两个问号"><a href="#3-中文变成两个问号" class="headerlink" title="3. 中文变成两个问号"></a>3. 中文变成两个问号</h2><p>经过了多次的编码解码。<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%89%E7%AB%A0/1-8.png?raw=true" alt="一个中文变两个问号"></p>
<h2 id="4-一种不正常的正确编码"><a href="#4-一种不正常的正确编码" class="headerlink" title="4. 一种不正常的正确编码"></a>4. 一种不正常的正确编码</h2><p>直接调用
<code>String value = request.getParameter(name);</code>会出现乱码。<br>但是
<code>String value = new String(request.getParameter(name).getBytes(&quot;ISO-8859-1&quot;), &quot;GBK&quot;)</code>会正常，为什么呢？<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%89%E7%AB%A0/1-9.png?raw=true" alt="非正常编码"><br>网络通过GBK编码之后的字节数组进行传输，Tomcat没有配置useBodyEncodingForURI，造成第一次解析通过ISO-8859-1解析，
这时候我们手动通过<code>ISO-8859-1</code>编码，再通过GBK解码就可以获得正确的值，但是额外增加了一次编解码过程。</p>
<h1 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h1><p>总结了几种常见编码格式的区别：</p>
<ul>
<li>ISO-8859-1：单字节编码，最多能表示256个字符。</li>
<li>GBK、GB2312：双字节编码，前者兼容后者。</li>
<li>UTF-16：双字节编码，Java内部内存额字符存储格式，操作方便，全部都是两个字节，但是浪费空间。</li>
<li>UTF-8：动态字节编码。<br>以及IO的编码实现类：StreamEncoder/StreamDecoder，对char和byte的编解码。</li>
</ul>
<p>HTTP过程的编码，包括：</p>
<ul>
<li>URL、URI的编码。</li>
<li>Header的编解码。</li>
<li>POST表单的编解码。Java使用request.getParameter()获取之前，先设置request.setCharacterEncoding(charset)。</li>
<li>BODY的编解码，即Response的编解码。</li>
<li>JS的编解码。</li>
</ul>
<p>Tomcat编解码源码。以及常见乱码问题的原因。<br>注意<strong>一定要手动设置编码的格式，实现真正的跨平台</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-几种常见的编码格式&quot;&gt;&lt;a href=&quot;#1-几种常见的编码格式&quot; class=&quot;headerlink&quot; title=&quot;1. 几种常见的编码格式&quot;&gt;&lt;/a&gt;1. 几种常见的编码格式&lt;/h1&gt;&lt;h2 id=&quot;1-为什么需要编码？&quot;&gt;&lt;a href=&quot;#1-为什么
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="深入分析Java_Web技术" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java-Web%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>二、课外学习NIO</title>
    <link href="http://yoursite.com/2017/08/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E8%AF%BE%E5%A4%96%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%85%B3%E4%BA%8ENIO/"/>
    <id>http://yoursite.com/2017/08/04/读书笔记/深入分析Java_Web技术/第二章课外学习：关于NIO/</id>
    <published>2017-08-04T14:56:30.000Z</published>
    <updated>2017-08-07T13:21:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-跑个Channel实例"><a href="#1-跑个Channel实例" class="headerlink" title="1.跑个Channel实例"></a>1.跑个Channel实例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileChannel</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// 源目标，春运的100W人</span></div><div class="line">    RandomAccessFile aFile=<span class="keyword">new</span> RandomAccessFile(<span class="string">"data.txt"</span>,<span class="string">"rw"</span>);</div><div class="line">    <span class="comment">// 获得源目标的运载交通工具，例如动车，同时动车的站台也站了100W人。</span></div><div class="line">    FileChannel inChannel=aFile.getChannel();</div><div class="line"></div><div class="line">    <span class="comment">// 分配buffer，这次春运，这辆D8888，每次跑两个字节单位的座位</span></div><div class="line">    ByteBuffer buf=ByteBuffer.allocate(<span class="number">2</span>);</div><div class="line">    <span class="comment">// 把动车的站台人和座位连接在一起，得到一个返回值，即该动车和两个字节单位座位的车票信息。</span></div><div class="line">    <span class="keyword">int</span> bytesRead=inChannel.read(buf);</div><div class="line">    <span class="comment">// 车票如果是-1说明车票没了，载完了，动车就去保养了。</span></div><div class="line">    <span class="keyword">while</span>(bytesRead!=-<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 座位的保险带绑上，人不能下座位或者上座位了，只能被车站人员检查</span></div><div class="line">        buf.flip();</div><div class="line">        <span class="comment">// 车站人员检查座位是否有对应的人的信息</span></div><div class="line">        <span class="keyword">while</span>(buf.hasRemaining())</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// 打印出以两个字节为单位的座位的人的信息</span></div><div class="line">            System.out.print((<span class="keyword">char</span>)buf.get());</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 座位保险带放开，人下车，座位就被清空</span></div><div class="line">        buf.clear();</div><div class="line">        <span class="comment">// 动车继续拉两个字节座位的人，又得到了座位的车票信息</span></div><div class="line">        bytesRead=inChannel.read(buf);</div><div class="line">    &#125;</div><div class="line">    aFile.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中的Buffer作为一个顶层抽象类，下面有不止八个子类，对应八种数据类型以及其他一些类型。
当Buffer，即座位在调用flip()方法之前，是写模式，即保险带是放开的，想上就上想下就下。<br>切记：Buffer只是在一个改变capacity、position、limit三个值的方法（还有mark，用于临时标记position，通常用于
发送某个指定位置之后，返回到发送指定位置之前的position，因为内部提供了方法用于这个需求）。</p>
<h2 id="1-写模式"><a href="#1-写模式" class="headerlink" title="1. 写模式"></a>1. 写模式</h2><ul>
<li>capacity：固定的大小。</li>
<li>position：初始值为0，写一单位数据就移动下一个可插入数据的单位，最大为capacity-1。</li>
<li>limit：额外的变量，用于读写分离。此时limit=capacity，写入的最大值。  </li>
</ul>
<h2 id="2-读模式"><a href="#2-读模式" class="headerlink" title="2. 读模式"></a>2. 读模式</h2><ul>
<li>capacity：固定的大小。</li>
<li>position：重置为0，读一单位数据就移动下一个可插入数据的单位。</li>
<li>limit：重置为position，你只能读你写了多少单位的数据。（flip()方法其实，就是将limit重置为position，position重置为0）</li>
</ul>
<h1 id="2-Buffer读写数据以及常用方法"><a href="#2-Buffer读写数据以及常用方法" class="headerlink" title="2. Buffer读写数据以及常用方法"></a>2. Buffer读写数据以及常用方法</h1><p>除了通过Channel写入数据，还可以使用Buffer.put()，写入执行某个位置。<br>也可以通过Buffer.get()，读取某个位置的数据。  </p>
<h2 id="1-Buffer-clear"><a href="#1-Buffer-clear" class="headerlink" title="1. Buffer.clear()"></a>1. Buffer.clear()</h2><p>limit设置为capacity，position重置为0。  </p>
<h2 id="2-Buffer-compact"><a href="#2-Buffer-compact" class="headerlink" title="2. Buffer.compact()"></a>2. <a href="http://zachary-guo.iteye.com/blog/1457542" target="_blank" rel="external">Buffer.compact()</a></h2><p>释放缓存区无用数据。当源目标为Mellow，我们已经读取了Me，现在缓存区还是Mellow，但是Me是无用的，这时候就可以调用该方法。  你可以使用
Buffer.put()以及Buffer.get()方法达到这个效果。<br>底层其实是将position-limit数据复制到开始的位置，并重置position = limit - position。<br>WHY？这个position是什么意思？其实原因在于这个方法用于：我读了Me，position为2，此时我想开始写数据，但是我以后会在某个时间点回来继续读，
则position就变成4，以后不管你写了多少，都正好不会覆盖未读数据。<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/6.png?raw=true" alt="Buffer.compact()"></p>
<h2 id="3-Buffer-rewind"><a href="#3-Buffer-rewind" class="headerlink" title="3. Buffer.rewind()"></a>3. Buffer.rewind()</h2><p>用于position重置为0，即重新开始写，或者读。</p>
<h2 id="4-Buffer-mark-和Buffer-reset"><a href="#4-Buffer-mark-和Buffer-reset" class="headerlink" title="4. Buffer.mark()和Buffer.reset()"></a>4. Buffer.mark()和Buffer.reset()</h2><p>mark默认为-1。
mark()：将当前position赋值给mark变量。<br>reset()：将mark赋值给position变量。</p>
<h2 id="5-Buffer-equals-和Buffer-compareTo"><a href="#5-Buffer-equals-和Buffer-compareTo" class="headerlink" title="5. Buffer.equals()和Buffer.compareTo()"></a>5. Buffer.equals()和Buffer.compareTo()</h2><p>相等的条件：类型相同、剩余的单位数量相同、剩余的单位类型相同。<br>比较的条件：第一个不相同的元素的大小，如果都相同，则看数量的多少。</p>
<h1 id="3-scatter与gather"><a href="#3-scatter与gather" class="headerlink" title="3. scatter与gather"></a>3. scatter与gather</h1><h2 id="1-scatter"><a href="#1-scatter" class="headerlink" title="1. scatter"></a>1. scatter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ByteBuffer header = ByteBuffer.allocate(<span class="number">128</span>);</div><div class="line">ByteBuffer body = ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line">ByteBuffer[] byteBuffers = &#123;header, body&#125;;</div><div class="line">FileChannel channel = <span class="keyword">new</span> RandomAccessFile(<span class="string">"data.txt"</span>,<span class="string">"rw"</span>).getChannel();</div><div class="line">channel.read(byteBuffers);</div></pre></td></tr></table></figure>
<p>不适用与动态消息，第一个Buffer被填充完毕之后才会填充第二个。</p>
<h2 id="2-gather"><a href="#2-gather" class="headerlink" title="2. gather"></a>2. gather</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ByteBuffer header = ByteBuffer.allocate(<span class="number">128</span>);</div><div class="line">ByteBuffer body = ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line">ByteBuffer[] buffers = &#123;header, body&#125;;</div><div class="line">FileChannel channel = <span class="keyword">new</span> RandomAccessFile(<span class="string">"data.txt"</span>,<span class="string">"rw"</span>).getChannel();</div><div class="line">channel.write(buffers);</div></pre></td></tr></table></figure>
<p>只会有position-limit的数据会被写入。</p>
<h1 id="4-Channel之间进行数据传输"><a href="#4-Channel之间进行数据传输" class="headerlink" title="4. Channel之间进行数据传输"></a>4. Channel之间进行数据传输</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RandomAccessFile sourceFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"SourceData.txt"</span>, <span class="string">"rw"</span>);</div><div class="line">FileChannel sourceChannel = sourceFile.getChannel();</div><div class="line">RandomAccessFile targetFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"TargetData.txt"</span>, <span class="string">"rw"</span>);</div><div class="line">FileChannel targetChannel = targetFile.getChannel();</div><div class="line"><span class="keyword">long</span> position = <span class="number">0</span>;</div><div class="line"><span class="keyword">long</span> count = sourceChannel.size();</div><div class="line">targetChannel.transferFrom(sourceChannel, position, count);</div></pre></td></tr></table></figure>
<p>还有一个Channel.transferTo()方法，和上面的方法相反的作用。<br>注意：目标文件如果本来大于源文件，目标文件只会被覆盖源文件要传输的数据，剩余的数据还会存在。
如果count传入的时候实际大于size，则被当做count，如果小于size，则会按小于的值覆盖。查看源码即可知。</p>
<h1 id="5-Selector"><a href="#5-Selector" class="headerlink" title="5. Selector"></a>5. Selector</h1><h2 id="1-为什么使用Selector？"><a href="#1-为什么使用Selector？" class="headerlink" title="1. 为什么使用Selector？"></a>1. 为什么使用Selector？</h2><p>Selector是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。
这样一个单独的线程可以管理多个Channel，从而管理多个网络连接。<br>可以使用一个线程处理所有的通道，而对于操作系统来说，线程之间上下文切换的开销很大，Selector则是
可以处理多个Channel。</p>
<h2 id="2-Selector使用"><a href="#2-Selector使用" class="headerlink" title="2. Selector使用"></a>2. Selector使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建Seletor</span></div><div class="line">Selector selector = Selector.open();</div><div class="line"><span class="comment">// channel注册到selector</span></div><div class="line"><span class="comment">// 继承自AbstractSelectableChannel的方法</span></div><div class="line">ServerSocketChannel channel = ServerSocketChannel.open();</div><div class="line">channel.configureBlocking(<span class="keyword">false</span>);</div><div class="line">SelectionKey key = channel.register(selector, SelectionKey.OP_READ);</div></pre></td></tr></table></figure>
<p>与Selector一起使用时，Channel必须处于费阻塞模式下，而FileChannel只能是阻塞模式，套接字可以切换。<br>监听的第二个参数是不同类型的事件：</p>
<ul>
<li>Connect：SelectionKey.OP_CONNECT</li>
<li>Accept：SelectionKey.OP_ACCEPT</li>
<li>Read：SelectionKey.OP_READ</li>
<li>Write：SelectionKey.OP_WRITE<br>监听多个事件：<code>第二个参数输入：SelectionKey.OP_CONNECT | SelectionKey.OP_CONNECT</code></li>
</ul>
<h2 id="3-SelectionKey"><a href="#3-SelectionKey" class="headerlink" title="3. SelectionKey"></a>3. SelectionKey</h2><h3 id="1-interset属性"><a href="#1-interset属性" class="headerlink" title="1. interset属性"></a>1. interset属性</h3><p>其中包含了一些你感兴趣的属性，即注册的事件：
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> interestSet = selectionKey.interestOps();</div><div class="line"><span class="keyword">boolean</span> isInterestedInAccept  = (interestSet &amp; SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT;</div><div class="line"><span class="keyword">boolean</span> isInterestedInConnect = (interestSet &amp; SelectionKey.OP_CONNECT) == SelectionKey.OP_CONNECT;</div><div class="line"><span class="keyword">boolean</span> isInterestedInRead    = (interestSet &amp; SelectionKey.OP_READ) == SelectionKey.OP_READ;</div><div class="line"><span class="keyword">boolean</span> isInterestedInWrite   = (interestSet &amp; SelectionKey.OP_WRITE) == SelectionKey.OP_WRITE;</div></pre></td></tr></table></figure></p>
<h3 id="2-ready属性"><a href="#2-ready属性" class="headerlink" title="2. ready属性"></a>2. ready属性</h3><p>ready集合是通道已经准备九局的操作的集合，你可以通过<code>int readySet = selectionKey.readyOps()</code>进行分别的访问，
也可以使用：
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">selectionKey.isAcceptable();</div><div class="line">selectionKey.isConnectable();</div><div class="line">selectionKey.isReadable();</div><div class="line">selectionKey.isWritable();</div></pre></td></tr></table></figure></p>
<h3 id="3-Selector获得Channel"><a href="#3-Selector获得Channel" class="headerlink" title="3. Selector获得Channel"></a>3. Selector获得Channel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Channel  channel  = selectionKey.channel();</div><div class="line">Selector selector = selectionKey.selector();</div></pre></td></tr></table></figure>
<h3 id="4-附加的对象（可选）"><a href="#4-附加的对象（可选）" class="headerlink" title="4. 附加的对象（可选）"></a>4. 附加的对象（可选）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">selectionKey.attach(theObject);</div><div class="line">Object attachedObj = selectionKey.attachment();</div></pre></td></tr></table></figure>
<h3 id="5-通过Selector选择通道"><a href="#5-通过Selector选择通道" class="headerlink" title="5. 通过Selector选择通道"></a>5. 通过Selector选择通道</h3><ul>
<li>int select()
该方法会让Selector阻塞，直到至少有一个Channel在你注册的事件上就绪。</li>
<li>int select(long timeout)
设置最长阻塞的毫秒数</li>
<li>int selectNow()
直接返回，无论什么Channel。  </li>
</ul>
<p>返回值表示从上次select()方法调用之后，又有多少符合要求的Channel，不叠加。</p>
<h3 id="6-wakeUp"><a href="#6-wakeUp" class="headerlink" title="6. wakeUp()"></a>6. wakeUp()</h3><p>某个线程调用select()让某个Selector阻塞后，使用该方法可以立马返回，如果没有阻塞，但是提前调用了wakeUp方法，
那么下个调用select方法的线程会立即wake up。</p>
<h3 id="7-遍历SelectorKeys"><a href="#7-遍历SelectorKeys" class="headerlink" title="7. 遍历SelectorKeys"></a>7. 遍历SelectorKeys</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Selector selector = Selector.open();</div><div class="line">Set selectionKeys = selector.selectedKeys();</div><div class="line">Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">    SelectionKey key = iterator.next();</div><div class="line">    <span class="keyword">if</span> (key.isAcceptable()) &#123;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isConnectable()) &#123;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    iterator.remove();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要手动将事件给移除。</p>
<h2 id="4-完整的示例"><a href="#4-完整的示例" class="headerlink" title="4. 完整的示例"></a>4. 完整的示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> port = <span class="number">9999</span>; </div><div class="line"></div><div class="line">ServerSocketChannel channel = ServerSocketChannel.open();</div><div class="line">channel.configureBlocking(<span class="keyword">false</span>); </div><div class="line"></div><div class="line">channel.socket().bind(<span class="keyword">new</span> InetSocketAddress(port)); </div><div class="line">Selector selector = Selector.open(); </div><div class="line">SelectionKey selKey = channel.register(selector, SelectionKey.OP_ACCEPT); </div><div class="line"></div><div class="line"><span class="keyword">int</span> interestSet = selKey.interestOps(); </div><div class="line"></div><div class="line"><span class="keyword">boolean</span> is_accept = (interestSet &amp; SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT;</div><div class="line"></div><div class="line">System.out.print(<span class="string">"isAccept:"</span>+ is_accept);</div></pre></td></tr></table></figure>
<h1 id="6-FileChannel"><a href="#6-FileChannel" class="headerlink" title="6. FileChannel"></a>6. FileChannel</h1><p>文件通道，用于文件的读写，常用，由于FileChannel无法设置非阻塞模式，它总是运行在阻塞模式下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> String str = <span class="string">"112中国"</span>;</div><div class="line">RandomAccessFile file = <span class="keyword">new</span> RandomAccessFile(</div><div class="line">        <span class="string">"D:\\source\\eclipse\\liwen\\src\\main\\java\\liwen\\com\\io\\data.txt"</span>, <span class="string">"rw"</span>);</div><div class="line">FileChannel channel = file.getChannel();</div><div class="line">channel.position(channel.position() + file.length());  <span class="comment">//这行代码设置写入文件的最后</span></div><div class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>);</div><div class="line">buffer.put(str.getBytes());</div><div class="line">buffer.flip();</div><div class="line"><span class="keyword">while</span> (buffer.hasRemaining()) &#123;</div><div class="line">    channel.write(buffer);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还有用于截取通道的方法：truncate()，以字节为单位。还有一个force()方法，用于强行将数据写入磁盘，
操作系统一般先将数据写入内存，再从内存写入磁盘，设置为True即可。</p>
<h1 id="7-SocketChannel"><a href="#7-SocketChannel" class="headerlink" title="7. SocketChannel"></a>7. SocketChannel</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 客户端连接，最后使用close关闭。</span></div><div class="line">SocketChannel channel = SocketChannel.open();</div><div class="line">channel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="number">8989</span>));</div><div class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>);</div><div class="line">channel.read(buffer);</div><div class="line"><span class="comment">// 从buffer中写入数据到channel</span></div><div class="line">String data = <span class="string">"what ? "</span>;</div><div class="line">buffer.clear();</div><div class="line">buffer.put(data.getBytes());</div><div class="line">buffer.flip();</div><div class="line"><span class="keyword">while</span> (buffer.hasRemaining()) &#123;</div><div class="line">    channel.write(buffer);</div><div class="line">&#125;</div><div class="line">channel.close();</div></pre></td></tr></table></figure>
<h1 id="8-ServerSocketChannel"><a href="#8-ServerSocketChannel" class="headerlink" title="8. ServerSocketChannel"></a>8. ServerSocketChannel</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务端开启监听：</span></div><div class="line">ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</div><div class="line">serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</div><div class="line">serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8777</span>));</div><div class="line"><span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">    SocketChannel channel = serverSocketChannel.accept();</div><div class="line">    <span class="comment">// 如果设置为非阻塞，则上面的代码会立马返回，需要判空，是否有连接。</span></div><div class="line">    <span class="keyword">if</span> (channel != <span class="keyword">null</span>)&#123;</div><div class="line">        String ip = serverSocketChannel.socket().getInetAddress().getHostAddress();</div><div class="line">        System.out.println(ip);</div><div class="line">        <span class="comment">// 此时你得到了channel，就可以使用Buffer对数据进行读取操作了。</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="9-DatagramChannel"><a href="#9-DatagramChannel" class="headerlink" title="9. DatagramChannel"></a>9. DatagramChannel</h1><p>用于UDP数据的发送和接收
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务端</span></div><div class="line">DatagramChannel channel = DatagramChannel.open();</div><div class="line">channel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</div><div class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>);</div><div class="line">channel.configureBlocking(<span class="keyword">false</span>);</div><div class="line">channel.receive(buffer); <span class="comment">//将得到的UDP数据写入buffer中</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 客户端</span></div><div class="line">DatagramChannel channel = DatagramChannel.open();</div><div class="line">String data = <span class="string">"中国"</span>;</div><div class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>);</div><div class="line">buffer.put(data.getBytes());</div><div class="line">buffer.flip();</div><div class="line">channel.send(buffer, <span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</div><div class="line">channel.close();</div></pre></td></tr></table></figure>
<h1 id="10-Pipe"><a href="#10-Pipe" class="headerlink" title="10. Pipe"></a>10. Pipe</h1><p>作为两个线程之间的单向数据连接连接（Channel本身是双向，但是通过两个双向的管道一起组合实现成一个单向的，即Sink-&gt;Source）。
<img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/7.png?raw=true" alt="Pipe">
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 向管道写数据</span></div><div class="line">Pipe pipe = Pipe.open();</div><div class="line">Pipe.SinkChannel sinkChannel = pipe.sink();</div><div class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>);</div><div class="line">buffer.put(<span class="string">"中国人"</span>.getBytes());</div><div class="line">buffer.flip();</div><div class="line"><span class="keyword">while</span> (buffer.hasRemaining())&#123;</div><div class="line">    sinkChannel.write(buffer);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 从管道读数据</span></div><div class="line">Pipe.SourceChannel sourceChannel = pipe.source();</div><div class="line">buffer.clear();</div><div class="line">sourceChannel.read(buffer);</div></pre></td></tr></table></figure></p>
<h1 id="11-NIO和IO"><a href="#11-NIO和IO" class="headerlink" title="11. NIO和IO"></a>11. NIO和IO</h1><h2 id="1-面向流和面向缓冲"><a href="#1-面向流和面向缓冲" class="headerlink" title="1. 面向流和面向缓冲"></a>1. 面向流和面向缓冲</h2><p>IO面向流，每次从流中读取一个或多个字节，直至读取所有的字节，没有被缓存再任何地方，另外，也不能移动流中的数据，
如果想移动，需要手动将流中的数据缓存在一个第三方缓冲区变量中。而NIO则本身就将数据放入到缓冲区中，可以在缓冲区
中前后移动，只是加多了对缓冲区的判断以及更多数据进入缓冲区时，不能覆盖原来的数据。</p>
<h2 id="2-阻塞和非阻塞"><a href="#2-阻塞和非阻塞" class="headerlink" title="2. 阻塞和非阻塞"></a>2. 阻塞和非阻塞</h2><p>本质区别，IO在读写直接阻塞。而NIO的读写的操作会直接返回值，进入下一步操作不会阻塞，并通过Selector来实现一个线程
对多个Channel，即多个读写进行管理。</p>
<h2 id="3-数据的处理"><a href="#3-数据的处理" class="headerlink" title="3. 数据的处理"></a>3. 数据的处理</h2><ul>
<li><p>IO的设计逐字节读取数据。例如你正在处理基于行的文本数据流：<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/8.png?raw=true" alt="">  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**data.txt</span></div><div class="line"><span class="comment"> * Name: xxx</span></div><div class="line"><span class="comment"> * Age: 18</span></div><div class="line"><span class="comment"> * Email: xxx@gmail.com</span></div><div class="line"><span class="comment"> * Phone: 135xxxxx</span></div><div class="line"><span class="comment"> */</span></div><div class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"data.txt"</span>)));</div><div class="line">String nameLine   = reader.readLine();</div><div class="line">String ageLine    = reader.readLine();</div><div class="line">String emailLine  = reader.readLine();</div><div class="line">String phoneLine  = reader.readLine();</div></pre></td></tr></table></figure>
</li>
<li><p>NIO直接读写：<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/9.png?raw=true" alt="">  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>);</div><div class="line">FileChannel channel = <span class="keyword">new</span> RandomAccessFile(<span class="string">"data.txt"</span>, <span class="string">"rw"</span>).getChannel();</div><div class="line"><span class="keyword">int</span> bytesRead = channel.read(buffer);</div><div class="line"><span class="keyword">while</span> (bytesRead != -<span class="number">1</span>) &#123;</div><div class="line">    channel.read(buffer);</div><div class="line"></div><div class="line">&#125;</div><div class="line">channel.close();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><ul>
<li>NIO可让您只使用一个（或几个）单线程管理多个通道（网络连接或文件），但付出的代价是解析数据可能会比从一个阻塞流中读取数据更复杂。<br>如果需要管理同时打开的成千上万个连接，这些连接每次只是发送少量的数据，例如聊天服务器，实现NIO的服务器可能是一个优势。同样，
如果你需要维持许多打开的连接到其他计算机上，如P2P网络中，使用一个单独的线程来管理你所有出站连接，可能是一个优势。<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/10.png?raw=true" alt=""></li>
<li>如果你有少量的连接使用非常高的带宽，一次发送大量的数据，也许典型的IO服务器实现可能非常契合。下图说明了一个典型的IO服务器设计：<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/11.png?raw=true" alt=""></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-跑个Channel实例&quot;&gt;&lt;a href=&quot;#1-跑个Channel实例&quot; class=&quot;headerlink&quot; title=&quot;1.跑个Channel实例&quot;&gt;&lt;/a&gt;1.跑个Channel实例&lt;/h1&gt;&lt;figure class=&quot;highlight java
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="深入分析Java_Web技术" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java-Web%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>一、深入Web请求过程</title>
    <link href="http://yoursite.com/2017/08/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%B7%B1%E5%85%A5Web%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/08/03/读书笔记/深入分析Java_Web技术/第一章：深入Web请求过程/</id>
    <published>2017-08-03T04:08:20.000Z</published>
    <updated>2017-08-04T08:19:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-DNS域名解析"><a href="#1-DNS域名解析" class="headerlink" title="1. DNS域名解析"></a>1. DNS域名解析</h1><p>使用浏览器输入网址后，浏览器会检查缓存对应的IP地址，如果没有，浏览器会查找操作系统，即host文件。
所以很多墙外比较慢的网址，可以手动编写host文件对应的IP地址以及对应的网址，可以加快访问速度。
如果实在没有就发送给LDNS，这个LDNS在不同的情况是不一样的，在学校，大部分都是学校的DNS服务器，
家庭的一般都是联通或者电信的DNS服务器，最最最后实在解析不出来，就抛给Root Server域名服务器，
它会返回给本地域名服务器的主域名服务器的地址，即域名空间提供商的域名解析服务器，就像阿里域名解析加速。</p>
<h1 id="2-清除缓存的域名"><a href="#2-清除缓存的域名" class="headerlink" title="2. 清除缓存的域名"></a>2. 清除缓存的域名</h1><p>主要在两个地方缓存：Local DNS Server, 另一个是用户的本机，当然，重启也是更好的方法。</p>
<blockquote>
<p><code>ipconfig /flushdns</code></p>
</blockquote>
<p>在java中，JVM也会缓存DNS的解析结果，分两种，即正确的解析结果，以及错误的解析结果，<code>InetAddress</code>，实际中<code>InetAddress</code>使用必须是单例模式，因为每次创建<code>InetAddress</code>实例都要进行一次完整的域名解析。</p>
<h1 id="3-CDN工作机制"><a href="#3-CDN工作机制" class="headerlink" title="3. CDN工作机制"></a>3. CDN工作机制</h1><p>CDN也就是内容分布网络(Content Delivery Network)。通过在现有的Internet中增加一层新的网络架构，比镜像更智能。
比喻：CDN=镜像Mirror+缓存Cache+整体负载均衡GSLB。
目前CDN都以缓存网站中的静态数据为主，如CSS、JS、图片和静态页面等，用户在从主站服务器请求到动态内容后，再从CDN上下载这些静态数据。
<img src="https://raw.githubusercontent.com/LiWenGu/static_resource/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%80%E7%AB%A0/1.png" alt="Web请求过程"></p>
<h1 id="4-负载均衡"><a href="#4-负载均衡" class="headerlink" title="4. 负载均衡"></a>4. 负载均衡</h1><p>负载均衡(Load Balance)就是对工作任务进行平衡、分摊到多个操作单元上执行，如图片服务器、应用服务器等，提高服务器响应速度，实现地理位置无关性。
通常有三种负载均衡架构：链路负载均衡、集群负载均衡、操作系统负载均衡。</p>
<ul>
<li>链路：用户最终访问哪个Web Server是由DNS Server来控制的，优点在于用户直接访问目标服务器，不需要经过其它的代理服务器，通常访问速度更快，缺点在于DNS在用户本地和LDNS都有缓存，一旦某台Web Server挂掉，就难及时更新用户的域名解析结构。</li>
<li>集群：硬件负载以及软件负载均衡，前者需要贵的硬件作为中心，而软件则是成本低，但是需要多次代理服务器转发，从而增加了网络延时。
<img src="https://raw.githubusercontent.com/LiWenGu/static_resource/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%B8%80%E7%AB%A0/2.png" alt="集群负载均衡"></li>
<li>操作系统：如设置多队列网卡。</li>
</ul>
<h1 id="5-CDN动态加速"><a href="#5-CDN动态加速" class="headerlink" title="5. CDN动态加速"></a>5. CDN动态加速</h1><p>原理在于CDN的DNS解析中通过动态的链路探测来寻找回源最好的一条路径，通过DNS的调度将所有请求到选定的路径上回源，一个简单的原则就是在每个CDN节点上从源站下载一个一定大小文件，看哪个链路的总耗时最短，这样可以构成一个链路列表，然后绑定到DNS解析上，更新到CDN的Local DNS。以及网络成本等。</p>
<h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>主要介绍域名的请求，哪些处理，对CDN以及负载均衡有了解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-DNS域名解析&quot;&gt;&lt;a href=&quot;#1-DNS域名解析&quot; class=&quot;headerlink&quot; title=&quot;1. DNS域名解析&quot;&gt;&lt;/a&gt;1. DNS域名解析&lt;/h1&gt;&lt;p&gt;使用浏览器输入网址后，浏览器会检查缓存对应的IP地址，如果没有，浏览器会查找操作
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="深入分析Java_Web技术" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java-Web%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>二、深入分析Java IO的工作机制</title>
    <link href="http://yoursite.com/2017/08/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java%20IO%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2017/08/03/读书笔记/深入分析Java_Web技术/第二章：深入分析Java IO的工作机制/</id>
    <published>2017-08-03T04:08:20.000Z</published>
    <updated>2017-08-07T14:15:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-JAVA的I-O类库的基本架构"><a href="#1-JAVA的I-O类库的基本架构" class="headerlink" title="1. JAVA的I/O类库的基本架构"></a>1. JAVA的I/O类库的基本架构</h1><ul>
<li>基于字节操作的I/O接口：InputStream和OutputStream。</li>
<li>基于字符操作的I/O操作：Writer和Reader。</li>
<li>基于磁盘操作的I/O操作：File。</li>
<li>基于网络操作的I/O操作：Socket。</li>
</ul>
<h1 id="2-字节字符的转换"><a href="#2-字节字符的转换" class="headerlink" title="2. 字节字符的转换"></a>2. 字节字符的转换</h1><p>低级的字节转字符，有InputStreamReader，以及OutputStreamWriter。
而字符转字节一般直接用new String(byte[])。 
注意：字符字节的转换在开发中一定要显示指明编码。
在OutputStreamWriter的官方注释中，错误的理解为从字符到字节，其实应该理解成字符与字节之间的桥梁。</p>
<h1 id="3-访问文件的几种方式"><a href="#3-访问文件的几种方式" class="headerlink" title="3. 访问文件的几种方式"></a>3. 访问文件的几种方式</h1><p>前言：读取和写入都是调用操作系统的提供的接口，而操作系统调用就会存在内核空间地址和用户空间地址切换的问题，一般的IO都是数据从
磁盘复制到内核空间，然后再从内核空间复制到用户空间，操作系统为了加速IO访问，在内核空间使用了缓存，即如果是第二次访问同一段
的磁盘地址，直接从内核缓存中取出。  </p>
<h2 id="1-标准访问文件的方式"><a href="#1-标准访问文件的方式" class="headerlink" title="1. 标准访问文件的方式"></a>1. 标准访问文件的方式</h2><p>读取：调用操作系统的Read接口，操作系统先检查内核的高速缓存，如果有缓存则直接返回，如果没有则从磁盘中读取，缓存，返回。
写入：调用操作系统的Writer接口，写入到高速缓存中，则通知应用程序完成，什么时候写入磁盘由操作系统决定。当然你可以使用sync强制刷新。<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/1-1.png?raw=true" alt="">  </p>
<h2 id="2-直接I-O的方式"><a href="#2-直接I-O的方式" class="headerlink" title="2. 直接I/O的方式"></a>2. 直接I/O的方式</h2><p>即应用程序直接访问磁盘数据，减少一次从内核缓冲区到用户空间的数据复制，例如数据库管理系统，数据库明确的知道哪些数据需要缓存
哪些不需要，以及哪些数据需要先放到内存中预热，但是不好的地方在于，你接管了数据缓存，如果你没有命中，则每次都是IO磁盘，比较
耗时，通常结合直接IO与异步IO。</p>
<h2 id="3-同步访问文件的方式"><a href="#3-同步访问文件的方式" class="headerlink" title="3. 同步访问文件的方式"></a>3. 同步访问文件的方式</h2><p>与标准访问文件不同点在于，写入了磁盘，操作系统才会应用程序返回成功的标志，用于安全性高的场景。  </p>
<h2 id="4-异步访问文件的方式"><a href="#4-异步访问文件的方式" class="headerlink" title="4. 异步访问文件的方式"></a>4. 异步访问文件的方式</h2><p>访问文件的请求线程发出后，不会阻塞等待，继续做别的事，完成文件访问后回调某个方法，提高应用程序的效率而不是访问文件的效率。  </p>
<h2 id="5-内存映射的方式"><a href="#5-内存映射的方式" class="headerlink" title="5. 内存映射的方式"></a>5. 内存映射的方式</h2><p>操作系统将内存中的某一块区域与磁盘中的文件关联，理解为快捷方式。这样中间加了一层地址映射，空间换时间，在实际开发中，多台业务
服务器对一个统一的路径下进行共享，方便数据的存储。例如A服务器下的data和B服务器下的data进行共享，便于文件的统一上传下载路径管理。<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/1-2.png?raw=true" alt=""></p>
<h1 id="4-访问磁盘文件"><a href="#4-访问磁盘文件" class="headerlink" title="4. 访问磁盘文件"></a>4. 访问磁盘文件</h1><p>前面介绍了操作数据，接着这里介绍数据写向何处，例如持久化到物理磁盘。<br>FileInputStream对象是操作一个文件的接口，创建的同时会创建该文件的描述对象FileDescriptor。操作文件对象的时候可以通过getFD()
方法获取真正与底层操作系统相关联的文件描述。例如调用FileDescriptor.sync()方法将操作系统缓存中的数据强制刷新到物理磁盘中。<br>byte-&gt;char是解码过程，因此读取文件都是需要StreamDecoder类帮助。<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/1-3.png?raw=true" alt=""></p>
<h2 id="1-Java序列化技术"><a href="#1-Java序列化技术" class="headerlink" title="1. Java序列化技术"></a>1. Java序列化技术</h2><p>将对象转化成一串二进制表示的字符数组，反序列化时需要原始类作为模板，原因在于序列化之后的文件不保存类的完整结构信息。
建议保存为通用的json/xml格式，比较耗的序列化工具：protobuf。序列化以及反序列需要注意一些常见的问题，例如serialVersionUID被修改，
序列化对象中有属性为对象但是该属性对象没有实现Serializable等。</p>
<h1 id="5-网络I-O工作机制"><a href="#5-网络I-O工作机制" class="headerlink" title="5. 网络I/O工作机制"></a>5. 网络I/O工作机制</h1><h2 id="1-TCP状态"><a href="#1-TCP状态" class="headerlink" title="1. TCP状态"></a>1. TCP状态</h2><p><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/1-4.png?raw=true" alt="">  </p>
<ol>
<li>三次握手
客户端CLOSED、SYN-SEND、ESTABLISHED。<br>服务端LISTEN、SYN-RCVD、ESTABLISHED。  </li>
<li>四次挥手<br>客户端ESTABLISHED、FIN_WAIT_1、FIN_WAIT_2、TIME_WAIT。<br>服务端ESTABLISHED、CLOSE_WAIT、LAST_ACK、CLOSE。</li>
</ol>
<h2 id="2-影响网络传输的因素"><a href="#2-影响网络传输的因素" class="headerlink" title="2. 影响网络传输的因素"></a>2. 影响网络传输的因素</h2><ul>
<li>网络带宽：物理链路在1s内传输的最大比特值，一般都是1.7Mb/s。</li>
<li>传输距离。</li>
<li>TCP拥塞控制：TCP传输是一个“停等停等”的过程，要步调一致则需要通过拥塞控制来调节。TCP在传输时会设定一个“窗口”，窗口大小由带宽和数据
在两端的来回时间，即响应时间决定的。</li>
</ul>
<h2 id="3-Java-Socket的工作机制"><a href="#3-Java-Socket的工作机制" class="headerlink" title="3. Java Socket的工作机制"></a>3. Java Socket的工作机制</h2><p><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/1-5.png?raw=true" alt="">
客户端开始建立一个Socket实例时，操作系统将为这个Socket实例分配一个没有被使用的本地端口号，并创建一个包含本地地址、
远程地址和端口号的套接字数据结构，这个数据结构一直保存在系统中直到这个连接关闭。在创建Socket实例的构造函数正确返回之前，将进行TCP的三次握手协议，
三次握手，完成之后，Socket实例创建完成。<br>服务端将创建一个ServerSocket实例，只要指定的端口号没有被占用，一般实例都会创建成功，操作系统底层也会为ServerSocket实例创建一个底层
数据结构，这个数据结构中包含指定的端口号和包含监听地址的通配符，通常都是“*”，即监听所有地址。之后调用accept()方法，进入阻塞状态，等待
客户端的请求。当一个新的请求到达时，为这个连接创建一个新的套接字数据结构，该套接字数据的信息包含的地址和端口信息正是请求源地址
和端口，同时这个新创建的数据结构将会关联到ServerSocket实例的一个未完成的连接数据结构列表中。注意，此时服务端的与之对应的Socket实例
并没有完成创建，而是要等待与客户端的3次握手完成后，这个服务端的Socket实例才会返回，并从未连接数据结构列表移到已完成列表。所以与ServerSocket
所关联的列表中每个数据结构都代表与一个客户端建立的TCP连接。</p>
<h2 id="4-数据传输"><a href="#4-数据传输" class="headerlink" title="4. 数据传输"></a>4. 数据传输</h2><p>服务端和客户端都会拥有一个Socket实例，每个Socket实例都有一个InputStream和OutputStream，通过这两个对象来交换数据，同时操作系统会为
这两个对象分配一定大小的缓存区。  </p>
<ul>
<li>写入：数据-&gt;OutputStream对应的SendQ队列，队列填满时，数据将会转移到另一端的InputStream的RecvQ队列中，如果RecvQ已经满了，那么
OuptStream的write方法将会阻塞，直到RecvQ队列可以容纳SendQ队列的数据。因此网络IO还需要一个协调的过程，如果两边同时传输数据则会产生死锁。</li>
</ul>
<h1 id="6-NIO的工作方式-建议先阅读课外学习：关于NIO"><a href="#6-NIO的工作方式-建议先阅读课外学习：关于NIO" class="headerlink" title="6. NIO的工作方式(建议先阅读课外学习：关于NIO)"></a>6. NIO的工作方式(建议先阅读<a href="http://www.liwenguang.website/2017/08/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E8%AF%BE%E5%A4%96%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%85%B3%E4%BA%8ENIO/" target="_blank" rel="external">课外学习：关于NIO</a>)</h1><h2 id="1-BIO的缺点"><a href="#1-BIO的缺点" class="headerlink" title="1. BIO的缺点"></a>1. BIO的缺点</h2><p>阻塞IO，即BIO，在读取和写入时（InputStream、OutputStream）都有可能堵塞，一旦有堵塞，线程将会失去CPU的使用权，一些方法，例如：一个客户端
一个处理线程、线程池用来减少线程创建和回收的成本。但是，当需要大量的HTTP长连接，例如Web旺旺，虽然并不是每个连接都一直在传输数据，但是如果要
对某个客户端（VIP）提供更高的服务优先，很难通过线程本省的优先级完成，同时访问一些竞争资源时，也会有问题，因此需要同步。因此NIO应运而生。</p>
<h2 id="2-NIO的工作机制"><a href="#2-NIO的工作机制" class="headerlink" title="2. NIO的工作机制"></a>2. NIO的工作机制</h2><p>通过等待读以及等待写的轮询，在真正进行IO的时候才是使用CPU阻塞，但是由于是memory copy，<a href="https://zhuanlan.zhihu.com/p/23488863" target="_blank" rel="external">在带宽足够大的1GB/s基本可以忽略</a>。</p>
<h2 id="3-Buffer的工作方式"><a href="#3-Buffer的工作方式" class="headerlink" title="3. Buffer的工作方式"></a>3. Buffer的工作方式</h2><p>可以简单理解为操作一组基本数据类型的元素列表：capacity、position、limit、mark。<br>注意，通过Channel获取的IO数据首先经过操作系统的Socket缓冲区，再将数据复制到Buffer中，这个操作系统缓冲区就是底层的TCP所关联的RecvQ或者
SendQ队列。<br>Buffer提供了另一种直接操作操作系统缓冲区的方式，即<code>ByteBuffer.allocateDirector()</code>，这个方法直接返回底层存储空间关联的缓冲区，它通过
Native代码操作非JVM堆的内存空间，每次创建或者释放都要手动调用一次System.gc()。<br>注意：使用该方法直接操作非JVM堆空间会引起JVM内存泄漏问题。适用于数据量比较大，生命周期比较长的情况下，而普通的allocate()方法
适用并发连接少于1000。</p>
<h2 id="4-FileChannel的数据访问"><a href="#4-FileChannel的数据访问" class="headerlink" title="4. FileChannel的数据访问"></a>4. FileChannel的数据访问</h2><h3 id="1-FileChannel-transferXXX"><a href="#1-FileChannel-transferXXX" class="headerlink" title="1. FileChannel.transferXXX"></a>1. FileChannel.transferXXX</h3><p>传统的数据访问方式：<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/1-6.png?raw=true" alt=""><br>FileChannel.transferXXX方式：<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/1-7.png?raw=true" alt=""></p>
<h3 id="2-FileChannel-map"><a href="#2-FileChannel-map" class="headerlink" title="2. FileChannel.map"></a>2. FileChannel.map</h3><p>将文件按照一定大小块映射为内存区域，当程序访问这个内存区域时将直接操作这个文件数据，省去了数据从内核空间向用户空间复制的损耗。
适用于对大文件的只读性操作，如大文件的MD5校验。</p>
<h1 id="7-IO调优"><a href="#7-IO调优" class="headerlink" title="7. IO调优"></a>7. IO调优</h1><h2 id="1-磁盘I-O优化"><a href="#1-磁盘I-O优化" class="headerlink" title="1. 磁盘I/O优化"></a>1. 磁盘I/O优化</h2><h3 id="1-性能检测"><a href="#1-性能检测" class="headerlink" title="1. 性能检测"></a>1. 性能检测</h3><p>在Linux下的iostat命令，查看I/O wait指标是否正常，即CPU等待I/O指标，如果是4核CPU，那么I、O wait参数不应该超过25%。</p>
<h3 id="2-提升I-O性能"><a href="#2-提升I-O性能" class="headerlink" title="2. 提升I/O性能"></a>2. 提升I/O性能</h3><ul>
<li>增加缓存，减少磁盘访问次数。</li>
<li>优化磁盘的管理系统</li>
<li>设计合理的磁盘存储数据块。</li>
</ul>
<h2 id="2-TCP网络参数调优"><a href="#2-TCP网络参数调优" class="headerlink" title="2. TCP网络参数调优"></a>2. TCP网络参数调优</h2><p>操作系统的端口号：2^16 = 65535个。
通过查看<code>cat /proc/sys/net/ipv4/ip_local_port_range</code>查看端口范围<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/1-8.png?raw=true" alt="port"><br>大量并发，端口号的数量就变成瓶颈，还有TIME_WAIT的数量，如果过多，需要将参数设小，提前释放。</p>
<h2 id="3-网络I-O优化"><a href="#3-网络I-O优化" class="headerlink" title="3. 网络I/O优化"></a>3. 网络I/O优化</h2><ul>
<li>减少网络交互的次数<br>SQL在客户端和数据库端设置缓存，请求css、js等可以合并为一个http链接，每个文件通过逗号隔开，服务端一次请求全部返回。</li>
<li>减少网络传输数据量的大小<br>通常Web服务器将请求的Web页面gzip压缩后再传输给浏览器。以及通过简单的协议，读取协议头来获取有用的价值信息。尽量
避免读取整个通信数据，例如<a href="https://baijiahao.baidu.com/s?id=1571237015697755" target="_blank" rel="external">4层代理和7层代理，都是精良避免要读取整个通信数据</a>。<br><img src="https://github.com/LiWenGu/static_resource/blob/master/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java_Web%E6%8A%80%E6%9C%AF/%E7%AC%AC%E4%BA%8C%E7%AB%A0/1-9.png?raw=true" alt="TCP"></li>
<li>尽量减少编码<br>尽量以字节形式发送。</li>
</ul>
<h3 id="1-同步与异步"><a href="#1-同步与异步" class="headerlink" title="1. 同步与异步"></a>1. 同步与异步</h3><ul>
<li>同步<br>一个任务的完成需要依赖另外一个任务时，只有等待被依赖的任务完成后，依赖的任务才能完成，这是一种可靠的任务序列，同生同死。
同步能保证程序的可靠性。</li>
<li>异步<br>不需要等待被依赖的任务完成只是通知被依赖的任务要完成什么工作，依赖的任务也立即执行。
异步可以提高程序的性能，需要在同步与异步中保持平衡</li>
</ul>
<h3 id="2-阻塞和非阻塞"><a href="#2-阻塞和非阻塞" class="headerlink" title="2. 阻塞和非阻塞"></a>2. 阻塞和非阻塞</h3><p>阻塞和非阻塞主要从CPU的消耗上来说。</p>
<ul>
<li>阻塞<br>CPU停下等待一个慢的操作完成之后，CPU才接着完成其他的工作。</li>
<li>非阻塞<br>这个慢操作执行时，CPU去做其他工作，这个慢操作完成时，CPU收到通知继续完成这个慢操作之后的事。</li>
</ul>
<h3 id="3-两种方式的组合"><a href="#3-两种方式的组合" class="headerlink" title="3. 两种方式的组合"></a>3. 两种方式的组合</h3><ul>
<li>同步阻塞<br>常用，简单，但是IO性能差，CPU大部分处于空闲状态。</li>
<li>同步非阻塞<br>常用于网络IO是长连接同时传输数据不多的情况。提升IO性能的常用手段，会增加CPU消耗，要考虑增加的IO性能能不能补偿CPU的消耗，也就是系统的瓶颈是在IO还是CPU上。</li>
<li>异步阻塞<br>常用于分布式数据库中。例如一个分布式数据库中写一条记录，通常会有一份是同步阻塞的记录，还有2~3份备份记录会写到
其他机器上，这些备份记录通常都采用异步阻塞的方式写IO，异步阻塞对网络IO能够提升效率，尤其像上面这种同时写多份
相同数据的情况。</li>
<li>异步非阻塞<br>比较复杂，只有在非常负载的分布式情况下使用，集群之间的消息同步机制一般使用这种IO组合方式。如Cassandra的Gossip通信机制就采用
异步非阻塞的方式。<br>适用于同时要传多份相同的数据到集群中不同的机器，同时数据的传输量虽然不大但非常频繁的情况。  </li>
</ul>
<p>虽然异步和非阻塞能够提高IO整体性能，但是会增加性能成本，以及程序设计复杂的上升，需要经验丰富的人去设计，如果
设计的不合理反而会导致性能下降。<a href="https://www.zhihu.com/question/19732473" target="_blank" rel="external">怎样理解阻塞非阻塞与同步异步的区别？</a></p>
<h1 id="8-适配器模式"><a href="#8-适配器模式" class="headerlink" title="8. 适配器模式"></a>8. 适配器模式</h1><p>博主做一个Integer转化为String的例子，仿造InputStream转化Reader的简单例子。
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputInteger_</span> <span class="keyword">implements</span> <span class="title">Integer_</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer a;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InputInteger_</span><span class="params">(Integer a)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.a = a;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getInteger</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Integer_</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getInteger</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_</span> <span class="keyword">implements</span> <span class="title">InputString_</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readString</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InputString_</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readString</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputInteger2String</span> <span class="keyword">implements</span> <span class="title">InputString_</span> </span>&#123;</div><div class="line"></div><div class="line">    Integer_ s;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InputInteger2String</span><span class="params">(Integer_ s)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.s = s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// StreamDecoder</span></div><div class="line">        Integer r = Integer.valueOf(s.getInteger());</div><div class="line">        System.out.println(r);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        InputInteger2String s = <span class="keyword">new</span> InputInteger2String(<span class="keyword">new</span> InputInteger_(<span class="number">4</span>));</div><div class="line">        s.readString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="9-装饰器模式"><a href="#9-装饰器模式" class="headerlink" title="9. 装饰器模式"></a>9. 装饰器模式</h1><p>赋予被装饰的类更多的功能，就像IO中的BufferedInputStream有缓冲的功能，LineNumberInputStream有提高按行读取数据的功能。
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream_</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStream_</span> <span class="keyword">extends</span> <span class="title">InputStream_</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterInputStream_</span> <span class="keyword">extends</span> <span class="title">InputStream_</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">protected</span> InputStream_ inputStream_;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilterInputStream_</span><span class="params">(InputStream_ inputStream_)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.inputStream_ = inputStream_;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">        inputStream_.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferInputStream_</span> <span class="keyword">extends</span> <span class="title">FilterInputStream_</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferInputStream_</span><span class="params">(InputStream_ inputStream_)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(inputStream_);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bufferFirst</span><span class="params">()</span></span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bufferEnd</span><span class="params">()</span></span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">        bufferFirst();</div><div class="line">        <span class="keyword">super</span>.read();</div><div class="line">        bufferEnd();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line"></div><div class="line">        InputStream_ inputStream_ = <span class="keyword">new</span> FileInputStream_();</div><div class="line">        BufferInputStream_ bufferInputStream_ = <span class="keyword">new</span> BufferInputStream_(inputStream_);</div><div class="line">        bufferInputStream_.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="10-适配器模式与装饰器模式区别"><a href="#10-适配器模式与装饰器模式区别" class="headerlink" title="10. 适配器模式与装饰器模式区别"></a>10. 适配器模式与装饰器模式区别</h1><p>它们有个别名，叫包装模式，都起到了包装一个类或对象的作用，但是作用不同。适配器通过改变接口来达到重复使用的目的（如果系统在设计初期，就尽量不要用
适配器模式），而装饰器模式保持原有的接口，增强原有对象的功能。</p>
<h1 id="11-总结"><a href="#11-总结" class="headerlink" title="11. 总结"></a>11. 总结</h1><p>Java中IO的基本库结构，磁盘IO和网络IO的工作方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-JAVA的I-O类库的基本架构&quot;&gt;&lt;a href=&quot;#1-JAVA的I-O类库的基本架构&quot; class=&quot;headerlink&quot; title=&quot;1. JAVA的I/O类库的基本架构&quot;&gt;&lt;/a&gt;1. JAVA的I/O类库的基本架构&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;基于
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="深入分析Java_Web技术" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java-Web%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
</feed>
